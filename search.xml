<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用位掩码优雅表示多重状态</title>
      <link href="/2023/eommabl8v90zmcau/"/>
      <url>/2023/eommabl8v90zmcau/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在编程和数据库设计中，经常会遇到需要存储多个状态或选项的情况。传统的做法可能需要用多个字段或者表来表示这些状态，这样不仅增加了数据的复杂性，还可能影响性能。本文将介绍如何使用位掩码来优雅、高效地解决这一问题。</p><h2 id="位掩码"><a href="#位掩码" class="headerlink" title="位掩码"></a>位掩码</h2><p>位掩码是一种编程技巧，说白了就是位操作。用单个整数的不同位来表示多个布尔值或状态。通过位运算（与、或、非等），可以高效地设置、清除、翻转和检查状态。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>设置位（Set）: <code>mask |= (1 &lt;&lt; i)</code></li><li>清除位（Clear）: <code>mask &amp;= ~(1 &lt;&lt; i)</code></li><li>翻转位（Toggle）: <code>mask ^= (1 &lt;&lt; i)</code></li><li>检查位（Check）: <code>if (mask &amp; (1 &lt;&lt; i)) &#123;...&#125;</code></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>虽然位操作很方便，但是可读性并不是很好。所以需要进行封装一下，以增强其可读性。以 Java 枚举为例，我们可以把抽象的位操作封装起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    ADMIN(<span class="number">1</span> &lt;&lt; <span class="number">0</span>, <span class="string">&quot;ADMIN&quot;</span>),</span><br><span class="line">    EDITOR(<span class="number">1</span> &lt;&lt; <span class="number">1</span>, <span class="string">&quot;EDITOR&quot;</span>),</span><br><span class="line">    VIEWER(<span class="number">1</span> &lt;&lt; <span class="number">2</span>, <span class="string">&quot;VIEWER&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> bitmask;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Role&gt; <span class="title function_">getRolesByBitmask</span><span class="params">(<span class="type">int</span> bitmask)</span> &#123;</span><br><span class="line">        List&lt;Role&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : Role.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((role.getBitmask() &amp; bitmask) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result.add(role);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getBitmaskByRoles</span><span class="params">(Collection&lt;Role&gt; roles)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bitmask</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            bitmask |= role.getBitmask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bitmask;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>找到具有多个特定角色（例如 ADMIN 和 EDITOR）的所有用户，可以这样写 SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> (roles <span class="operator">&amp;</span> ?) <span class="operator">=</span> ?</span><br></pre></td></tr></table></figure><p>其中? 部分就是<code>getRolesByBitmask</code>计算出来的位<br>查找任一角色</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> (roles <span class="operator">&amp;</span> ?) <span class="operator">!=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 问题随记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决longhorn卸载的问题</title>
      <link href="/2023/kcfuybdpcyglpzwu/"/>
      <url>/2023/kcfuybdpcyglpzwu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>longhorn 使用 helm 卸载的时候需要<a href="https://longhorn.io/docs/1.5.1/references/settings/#deleting-confirmation-flag">deleting-confirmation-flag</a>为 true，官方给的命令是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n longhorn-system patch -p <span class="string">&#x27;&#123;&quot;value&quot;: &quot;true&quot;&#125;&#x27;</span> --<span class="built_in">type</span>=merge lhs deleting-confirmation-flag</span><br></pre></td></tr></table></figure><p>执行报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error from server (NotFound): settings.longhorn.io <span class="string">&quot;deleting-confirmation-flag&quot;</span> not found</span><br></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>看报错信息是没有这个 setting 所以无法用官方给的命令。<br>我猜因该是安装的时候被打断了没有完全安装导致这值没有被正确设置<br>既然没有，那就帮他新建一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n longhorn-system apply -f - &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">apiVersion: longhorn.io/v1beta1</span></span><br><span class="line"><span class="string">kind: Setting</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: deleting-confirmation-flag</span></span><br><span class="line"><span class="string">  namespace: longhorn-system</span></span><br><span class="line"><span class="string">value: &quot;true&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 问题随记 </tag>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建基于tailscale的k3s集群</title>
      <link href="/2023/wr1k938pe0tqfyq0/"/>
      <url>/2023/wr1k938pe0tqfyq0/</url>
      
        <content type="html"><![CDATA[<p>10 月 22 日更新<br>k3s 已经官方支持了 taiscale，搭建起来更简单了，以下内容可能失效，请直接看文档。</p><p>本文是我基于 tailscale 的 k3s 集群搭建过程的笔记。</p><h2 id="安装-tailscale"><a href="#安装-tailscale" class="headerlink" title="安装 tailscale"></a>安装 tailscale</h2><p>首先需要在全部的服务器上安装 tailscale 并且加入到网络里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://tailscale.com/install.sh | sh</span><br><span class="line">tailscale up</span><br></pre></td></tr></table></figure><h2 id="安装-master"><a href="#安装-master" class="headerlink" title="安装 master"></a>安装 master</h2><p>主节点服务器安装 master<br>安装 k3s，注意替换 ip 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> INSTALL_K3S_EXEC=<span class="string">&quot;server --node-ip MASTER_IP --flannel-iface tailscale0 &quot;</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br></pre></td></tr></table></figure><p>获取 master 的 token 一会用的到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><p>注意替换掉下面的 MASTER_IP、TOKEN、NODE_IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> K3S_URL=https://MASTER_IP:6443</span><br><span class="line"><span class="built_in">export</span> K3S_TOKEN=TOKEN</span><br><span class="line"><span class="built_in">export</span> INSTALL_K3S_EXEC=<span class="string">&quot;agent --flannel-iface=tailscale0 --node-ip NODE_IP --server=<span class="variable">$&#123;K3S_URL&#125;</span> --token=<span class="variable">$&#123;K3S_TOKEN&#125;</span>&quot;</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br></pre></td></tr></table></figure><p>其他的 node 重复一下就行了。这样集群就搭建完毕了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用一个网段的ipv6地址作为出口ip</title>
      <link href="/2023/urdldnz7oe4ygxr4/"/>
      <url>/2023/urdldnz7oe4ygxr4/</url>
      
        <content type="html"><![CDATA[<p>正常情况下选择出口 ip 的前提条件是要把这个 ip 静态配置在网卡上，但是如果是一个网段的 ipv6 可能难以做到的了。一方面他真的很多 linux 不支持配置这么多，另一方面性能也是个问题。因此这篇文章讨论的方案是一个动态话非配置的方式，直接在使用的时候指定 ip 的形式。</p><h2 id="1-动态绑定-IPv6-地址"><a href="#1-动态绑定-IPv6-地址" class="headerlink" title="1. 动态绑定 IPv6 地址"></a>1. 动态绑定 IPv6 地址</h2><h3 id="1-1-修改内核参数"><a href="#1-1-修改内核参数" class="headerlink" title="1.1 修改内核参数"></a>1.1 修改内核参数</h3><p>确保系统允许绑定非本地 IPv6 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -w net.ipv6.ip_nonlocal_bind=1</span><br></pre></td></tr></table></figure><p>要使更改在重启后依然生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv6.ip_nonlocal_bind=1&quot;</span> | sudo <span class="built_in">tee</span> -a /etc/sysctl.conf</span><br></pre></td></tr></table></figure><h3 id="1-2-设置本地路由"><a href="#1-2-设置本地路由" class="headerlink" title="1.2 设置本地路由"></a>1.2 设置本地路由</h3><p>对于使用的 IPv6 地址或地址范围，需要创建一个本地路由条目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route add <span class="built_in">local</span> 2XXX:XXXX:XXXX:XXe4::/64 dev eth0</span><br></pre></td></tr></table></figure><h2 id="2-配置-NDP-代理"><a href="#2-配置-NDP-代理" class="headerlink" title="2. 配置 NDP 代理"></a>2. 配置 NDP 代理</h2><p><code>ndppd</code>允许您对那些未直接分配给机器但您希望使用的 IPv6 地址进行代理。</p><h3 id="2-1-安装-NDP"><a href="#2-1-安装-NDP" class="headerlink" title="2.1 安装 NDP"></a>2.1 安装 NDP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ndppd</span><br></pre></td></tr></table></figure><h3 id="2-2-添加配置："><a href="#2-2-添加配置：" class="headerlink" title="2.2 添加配置："></a>2.2 添加配置：</h3><p><code>/etc/ndppd.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">route-ttl 30000</span><br><span class="line">proxy eth0 &#123;</span><br><span class="line">  router no</span><br><span class="line">  <span class="built_in">timeout</span> 500</span><br><span class="line">  ttl 30000</span><br><span class="line">  rule 2XXX:XXXX:XXXX:XXe4::/64 &#123;</span><br><span class="line">    static</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-启动服务"><a href="#2-3-启动服务" class="headerlink" title="2.3 启动服务"></a>2.3 启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start ndppd</span><br></pre></td></tr></table></figure><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><p>这样就可以在直接指定出口 ip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --interface 2XXX:XXXX:XXXX:XXe4::2 ipv6.ip.sb</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Wine环境下DLL注入的路径问题</title>
      <link href="/2023/li4wroltggfw0x6b/"/>
      <url>/2023/li4wroltggfw0x6b/</url>
      
        <content type="html"><![CDATA[<p>Wine 环境下进行 DLL 注入时，我遇到了一个奇怪的现象。尽管 DLL 成功注入，但随后程序却立即进入了 DLL_THREAD_DETACH 的生命周期阶段。这个问题困扰了我一段时间，后来我注意到，如果我在 Wine 的目录下（~&#x2F;.wine）或者 WORKDIR 启动 exe，DLL 注入后程序就不会自动退出。</p><p>我怀疑这和 DLL 的搜索路径有关，在 Linux 环境可能没办法做的那么完美，或者和 Wine 的实现相关。如果大家有遇到类似的问题，可以尝试一下在 Wine 目录或者 WORKDIR 启动 exe 程序。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> C++ </tag>
            
            <tag> wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github更换主邮箱导致无法登录Vultr</title>
      <link href="/2023/ah3atks8nht1hfz1/"/>
      <url>/2023/ah3atks8nht1hfz1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>vultr 的 github 登录竟然是邮箱来识别的，真他妈的离谱。<br>这个邮箱目前在 vultr 上也无法修改，真是蛋疼。</p><h2 id="蛋疼的过程"><a href="#蛋疼的过程" class="headerlink" title="蛋疼的过程"></a>蛋疼的过程</h2><p>昨天发现 vultr 登录不上去了，提示<code>Invalid username/password</code>但是服务器还是可以用的。<br><img src="/images/1679723675602-a7e058a0-2970-4176-9b1d-0cbe4d296bce.png"><br>网上有说是被封号&#x2F;删号了。因为我这边的的服务器还是可用的， 所以我排除了这种可能性。</p><p>发了一个邮件给他来询问账号怎么了。<br>很快收到了回复，一个扯皮邮件。<br><img src="/images/1679722402041-deb3a14a-1dde-4df6-962c-a633c2074385.png"></p><p>我最后一次登录 vultr 是在一个月前，我就回忆了一下这个月自己对 github 账号进行了什么操作，改了个名字， 换了个邮箱。我一开始在想，vultr 不会这么蠢吧。然后，我就把 github 邮箱换回去了，然后就可以正常登录了。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>因为那个邮箱我不在作为主邮箱使用，vultr 目前也无法在页面上进行修改邮箱，发了个邮件问了一下，Github 登陆的邮箱不支持修改。 看来只能等钱用完了换个号了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决poi读出来的sheet个数和实际看到个数不一致</title>
      <link href="/2023/extlf0qnrsemi3pi/"/>
      <url>/2023/extlf0qnrsemi3pi/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>业务那边给了个 excel，用 office 软件打开只显示一个 Sheet，但是使用 poi 读可以读出来 3 个 sheet，并且看了这个 excel 确实没有隐藏 sheet。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>一开始用了一些关键字并没有找到相应的结果。并且使用 poi 查看这个看不到的 sheet 的 isHidden 也确实都是 fasle。<br>后来快要放弃的时候，发现了 poi 接口有个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.poi.ss.usermodel.Workbook#getSheetVisibility</span><br></pre></td></tr></table></figure><p>这个方法和 isHidden 是同一个层级的，只是因为在找 isHidden 的时候 ide 自动提示出来的。然后我就调用了一下这个方法，发现看不到的 excel 使用这个方法返回的是<code>VERY_HIDDEN</code>这个枚举值。</p><p>有了这个关键字，然后去搜索这个关键字就比较容易了。找到了一个比较好的解释，链接我放到参考里面去了。大概意思 excel 有一种 very hidden 模式，这个模式默认情况下不会漏出来，需要在开发者模式下，或者像我这样用 poi 才能看到。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://theexcelclub.com/excel-hidden-and-very-hidden-sheets-whats-the-difference/">https://theexcelclub.com/excel-hidden-and-very-hidden-sheets-whats-the-difference/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows远程唤醒</title>
      <link href="/2023/fp3cf4gliz868x9t/"/>
      <url>/2023/fp3cf4gliz868x9t/</url>
      
        <content type="html"><![CDATA[<p>因为需要可能偶尔会需要远程一下家里的电脑，但是太穷了电脑不能一直开机。</p><h2 id="通电唤醒"><a href="#通电唤醒" class="headerlink" title="通电唤醒"></a>通电唤醒</h2><p>这是之前用的方案，在电源上接一个智能插座，bios 设置通电自动开机。</p><h2 id="网络唤醒"><a href="#网络唤醒" class="headerlink" title="网络唤醒"></a>网络唤醒</h2><p>可以参考一下这篇文章<a href="https://sspai.com/post/67003">https://sspai.com/post/67003</a>，说的比较详细了，设置网卡唤醒，然后使用 App 发送请求达到唤醒的目的。</p><h2 id="开机卡"><a href="#开机卡" class="headerlink" title="开机卡"></a>开机卡</h2><p>这是我现在用的方案。比起网络唤醒更省电。<br>而且现在的开机卡都比较智能了。可以直连家里的智能家居，可以受到小爱同学或者 siri 的控制。淘宝一搜就有。</p><p>开机卡一般使用 PCIE 供电，当然也有 USB 供电的。这里要额外说一下 PCIE 供电的，一般的主板都会有 PCIE 供电口，但是可能是消费级别的主板这个口一般用的不多，网上看到很多人都在吐槽显卡会挡住这个口，刚好我的主板的 PCIE 口就被显卡挡住了，而且是两个都被挡住了。没办法只要接了一个 PCIE 扩展线，把口接出来才能用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岛屿的数量</title>
      <link href="/2023/kyfz3rh4qhrdvqaz/"/>
      <url>/2023/kyfz3rh4qhrdvqaz/</url>
      
        <content type="html"><![CDATA[<p>原题连接 <a href="https://leetcode.cn/problems/number-of-islands/description/">https://leetcode.cn/problems/number-of-islands/description/</a></p><h2 id="方法-1-并查集"><a href="#方法-1-并查集" class="headerlink" title="方法 1 并查集"></a>方法 1 并查集</h2><p>这是一个很典型的并查集问题。初始化并查集，把全部的陆地分别设置成单独的集合，然后遍历，如果有陆地相连则把集合合并，最后计算最后剩余的集合个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numIslands</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">str</span>]]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        union_find = UnionFind(grid)</span><br><span class="line">        l1,l2 = <span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l1):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(l2):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="comment"># 这里做不做这个都可以，因为并查集做了路径压缩，这里改成0是优化，但是影响不大</span></span><br><span class="line">                    grid[i][j] == <span class="string">&#x27;0&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> i &gt; <span class="number">1</span> <span class="keyword">and</span> grid[i - <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        union_find.union((i,j), (i-<span class="number">1</span>,j))</span><br><span class="line">                    <span class="keyword">if</span> i + <span class="number">1</span> &lt; l1 <span class="keyword">and</span> grid[i + <span class="number">1</span>][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        union_find.union((i,j), (i+<span class="number">1</span>,j))</span><br><span class="line">                    <span class="keyword">if</span> j &gt; <span class="number">1</span> <span class="keyword">and</span> grid[i][j - <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        union_find.union((i,j), (i,j - <span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">if</span> j + <span class="number">1</span> &lt;  l2 <span class="keyword">and</span> grid[i][j + <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                        union_find.union((i,j), (i,j + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> union_find.count()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UnionFind</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,grid</span>):</span><br><span class="line">        self.cnt = <span class="number">0</span></span><br><span class="line">        self.par = &#123;&#125;</span><br><span class="line">        l1,l2 = <span class="built_in">len</span>(grid),<span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l1):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(l2):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    self.par[(i,j)] = (i,j)</span><br><span class="line">                    self.cnt += <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self,p</span>):</span><br><span class="line">        <span class="keyword">if</span> p <span class="keyword">not</span> <span class="keyword">in</span> self.par:</span><br><span class="line">            self.par[p] = p</span><br><span class="line">            self.cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.par[p] != p:</span><br><span class="line">            self.par[p] = self.find(self.par[p])</span><br><span class="line">        <span class="keyword">return</span> self.par[p]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">union</span>(<span class="params">self,p1,p2</span>):</span><br><span class="line">        <span class="keyword">if</span> self.find(p1) != self.find(p2):</span><br><span class="line">            self.par[self.find(p1)] = self.find(p2)</span><br><span class="line">            self.cnt -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.cnt</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用python3刷题语法</title>
      <link href="/2022/bhqthr46qrk62ikq/"/>
      <url>/2022/bhqthr46qrk62ikq/</url>
      
        <content type="html"><![CDATA[<p>因为主编程语言不是 python，很多语法容易忘，特意记录一下。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="普通循环"><a href="#普通循环" class="headerlink" title="普通循环"></a>普通循环</h3><p>range 是左闭右开区间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="逆序"><a href="#逆序" class="headerlink" title="逆序"></a>逆序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>循环变量在循环体外面依然可以用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 这里输出的是9，并不等价于类c语言里面的 for(i = 0;i &lt; 10; i++)</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h3><p>返回的元组第一个参数是 index</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;abcd&quot;</span><br><span class="line">for i,c in enumerate(s):</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制数组</span></span><br><span class="line">b = a[:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取前四个数</span></span><br><span class="line">b = a[:<span class="number">4</span>]</span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">b = a[<span class="number">0</span>:<span class="number">4</span>:<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取前四个没隔两个一取</span></span><br><span class="line">b = a[:<span class="number">4</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="数组比较"><a href="#数组比较" class="headerlink" title="数组比较"></a>数组比较</h3><p>直接比就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1 == list2</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="按照字典序排序"><a href="#按照字典序排序" class="headerlink" title="按照字典序排序"></a>按照字典序排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&quot;dcba&quot;</span></span><br><span class="line">b = <span class="string">&quot;&quot;</span>.join(<span class="built_in">sorted</span>(a))</span><br></pre></td></tr></table></figure><h3 id="转换成-asc-码"><a href="#转换成-asc-码" class="headerlink" title="转换成 asc 码"></a>转换成 asc 码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h3><p>同数组</p><h3 id="字符串是否是数字"><a href="#字符串是否是数字" class="headerlink" title="字符串是否是数字"></a>字符串是否是数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.isdigit()</span><br></pre></td></tr></table></figure><h3 id="字符串是否是由数字和字母组成"><a href="#字符串是否是由数字和字母组成" class="headerlink" title="字符串是否是由数字和字母组成"></a>字符串是否是由数字和字母组成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.isalnum()</span><br></pre></td></tr></table></figure><h3 id="转大小写"><a href="#转大小写" class="headerlink" title="转大小写"></a>转大小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.lower()</span><br><span class="line"><span class="built_in">str</span>.upper()</span><br></pre></td></tr></table></figure><h2 id="collections"><a href="#collections" class="headerlink" title="collections"></a>collections</h2><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>可以用来统计字符出现的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;A&quot;</span>]</span><br><span class="line">b = collections.Counter(a)</span><br></pre></td></tr></table></figure><p>返回的是个字典</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;A&#x27;: 3, &#x27;B&#x27;: 1, &#x27;C&#x27;: 1&#125;</span><br></pre></td></tr></table></figure><h3 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3><p>相比于 dict 可以在 key 不存在的时候返回一个默认值，而不是报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = collections.defaultdict(<span class="built_in">list</span>)</span><br><span class="line">a = collections.defaultdict(<span class="built_in">int</span>)</span><br><span class="line">a = collections.defaultdict(<span class="built_in">set</span>)</span><br><span class="line">a = collections.defaultdict(<span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">a = collections.defaultdict(<span class="keyword">lambda</span>: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h2><h3 id="开方"><a href="#开方" class="headerlink" title="开方"></a>开方</h3><p>会返回一个浮点数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = math.sqrt(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="乘方"><a href="#乘方" class="headerlink" title="乘方"></a>乘方</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">pow</span>(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">a = <span class="number">3</span> ** <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>将可迭代的对象打包成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">d = <span class="built_in">list</span>(<span class="built_in">zip</span>(a, b, c))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(1, 2, 4), (2, 3, 5), (3, 4, 6)]</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当然在python中 list相加不需要自己写</span></span><br><span class="line">s = <span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map 会根据提供的函数对指定序列做映射</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> map(lambda x: x ** 2, [1, 2, 3])</span><br><span class="line">[1, 4, 9]</span><br></pre></td></tr></table></figure><h3 id="all"><a href="#all" class="headerlink" title="all"></a>all</h3><p>判断一个集合是否全部为 true&#x2F;非空</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all([1,2,3])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdfbox实现pdf合并</title>
      <link href="/2022/pg89hgy7pr4o41wn/"/>
      <url>/2022/pg89hgy7pr4o41wn/</url>
      
        <content type="html"><![CDATA[<p>目前 Java 的 pdf 文档合并方案常见的有 spire.doc.free、itextpdf、pdfbox 三种。spire.doc.free 的免费版本有页数限制，这里就不考虑了。而性能最好的 itext 的开源协议是<a href="https://github.com/itext/itextpdf/blob/develop/LICENSE.md">AGPL</a>，为了避免以后可能出现的麻烦我放弃了他，选择了可以商用比较友好的 pdfbox。</p><h2 id="pdfbox"><a href="#pdfbox" class="headerlink" title="pdfbox"></a>pdfbox</h2><p>Apache pdfbox 是一个开源 Java 库，可用于创建，渲染，打印，拆分，合并，更改，验证和提取 pdf 文件的文本和元数据。</p><h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.pdfbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pdf-合并"><a href="#pdf-合并" class="headerlink" title="pdf 合并"></a>pdf 合并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergePdf</span><span class="params">(String... path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">PDFMergerUtility</span> <span class="variable">pdfMerger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PDFMergerUtility</span>();</span><br><span class="line">    pdfMerger.setDestinationFileName(<span class="string">&quot;target/merged.pdf&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String s : path) &#123;</span><br><span class="line">        pdfMerger.addSource(ResourceUtils.getFile(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pdfMerger.mergeDocuments(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> pdf </tag>
            
            <tag> pdfbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字符串split、replaceAll忽略全半角和大小写</title>
      <link href="/2022/fiuy92xf21391fgf/"/>
      <url>/2022/fiuy92xf21391fgf/</url>
      
        <content type="html"><![CDATA[<h2 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll"></a>replaceAll</h2><p>忽略大小写很简，使用正则就可以实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Hello word&quot;</span>.replaceAll(<span class="string">&quot;(?i)hello&quot;</span>,<span class="string">&quot;你好&quot;</span>);</span><br></pre></td></tr></table></figure><p>忽略全角半角就需要自己实现了，实现思路是把原字符串、要匹配的字符串全部转换成半角（全角），然后对转换后的字符串做 indexOf，得到 index 之后替换原字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceAllIgnoreHalfFull</span><span class="params">(String source, String toReplace, String replacement)</span> &#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sbSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(source);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sbSourceHalf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(StringUtils.fullToHalf(source));</span><br><span class="line">    <span class="type">String</span> <span class="variable">searchString</span> <span class="operator">=</span> StringUtils.fullToHalf(toReplace);</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((idx = sbSourceHalf.indexOf(searchString, idx)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        sbSource.replace(idx, idx + searchString.length(), replacement);</span><br><span class="line">        idx += searchString.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sbSource.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>原理和上面一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">split</span><span class="params">(String source,String separator)</span>&#123;</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sbSourceHalf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(StringUtils.fullToHalf(source));</span><br><span class="line">    <span class="type">String</span> <span class="variable">separatorStr</span> <span class="operator">=</span> StringUtils.fullToHalf(separator);</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> separatorStr.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">termStart</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    List&lt;String&gt; ret = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span>((idx = sbSourceHalf.indexOf(separatorStr, idx)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">term</span> <span class="operator">=</span> source.substring(termStart,idx);</span><br><span class="line">        ret.add(term);</span><br><span class="line">        idx +=  separatorStr.length();</span><br><span class="line">        termStart = idx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret.add(source.substring(termStart));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java word转pdf方案</title>
      <link href="/2022/wz2mz59xvzm6f9b5/"/>
      <url>/2022/wz2mz59xvzm6f9b5/</url>
      
        <content type="html"><![CDATA[<h1 id="方案调研"><a href="#方案调研" class="headerlink" title="方案调研"></a>方案调研</h1><h2 id="xdocreport"><a href="#xdocreport" class="headerlink" title="xdocreport"></a>xdocreport</h2><p><a href="https://github.com/opensagres/xdocreport">https://github.com/opensagres/xdocreport</a><br>我测试的最新版本(2.0.3)使用图片会报错，默认不是识别汉子（大概因为字体原因？），不支持批注。<br>网上了解到的可能 word 格式要求较大。</p><h2 id="Aspose"><a href="#Aspose" class="headerlink" title="Aspose"></a>Aspose</h2><p><a href="https://www.aspose.com/">https://www.aspose.com/</a><br>应该是最完美的方案，但是收费，不便宜<br><img src="/images/1669194121506-cf95425d-ebfc-463e-b6b6-09b50c900d2f.png"></p><h2 id="WPS-云服务"><a href="#WPS-云服务" class="headerlink" title="WPS 云服务"></a>WPS 云服务</h2><p>定价未知，文档上没有明确出来。<br>需要注册认证成为服务商<br>需要服务暴露到公网上，因为 wps 会回掉服务。<br><img src="/images/1669261180257-216a1bea-f829-497a-90cd-e43f191a6de3.png"><br>格式没有测试，应该会和 office 有细微的差距。</p><h2 id="阿里云服务"><a href="#阿里云服务" class="headerlink" title="阿里云服务"></a>阿里云服务</h2><p>接口八分钱一次，必须使用阿里云 oss。网上资料很少，个人感觉效果不错，口碑未知。<br><img src="/images/1669262327034-9513b07a-166b-41e3-9af9-1fea6f8f8fac.png"><br>应该是最佳方案。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Libreoffice"><a href="#Libreoffice" class="headerlink" title="Libreoffice"></a>Libreoffice</h2><p>需要安装 Libreoffice<br>可以使用程序去调用他自带的 soffice 工具来转或者通过 UNO 的方式<br>排版会有差异，而且也涉及到字体问题，涉及到字体版权问题。</p><h2 id="Jacob"><a href="#Jacob" class="headerlink" title="Jacob"></a>Jacob</h2><p>仅支持 windows，大致原理就是调用 Microsoft Office &#x2F; WPS 来实现转换，当然需要安装对应的软件，因为我们生产系统肯定部署在 linux 上面，这个方案肯定不行。</p><h2 id="JobConverter"><a href="#JobConverter" class="headerlink" title="JobConverter"></a>JobConverter</h2><p>本质上也是调用 Microsoft Office 或 Libreoffice 完成的转换。需要装对应的软件。</p><h2 id="docx4j"><a href="#docx4j" class="headerlink" title="docx4j"></a>docx4j</h2><p>引入一个 jar 包即可。<br>有字体问题，需要设置字体，不然中文会是乱码。<br>支持图片，不支持批注，批注会渲染成报错信息直接出现在输出的 pdf 中（这个就比较蛋了，哪怕你不显示也行啊）一些 word 中设置的格式无法体现出来，比如一些样式，表格的自动换行等。</p><p><img src="/images/1669196381100-0676c37a-98f7-4cb0-b4af-5ce496ee2a6a.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>docx4j、xdocreport 可以在不安装 office 的情况下完成转换，但是格式问题有点大，我们需求的 word 还是蛮复杂的。云服务阿里云的价格还行。其他方案都需要安装软件。关键软件还不小。如果需要免费方案的话，我可能会选择用 Libreoffice 的方案，docker 打一个装好 Libreoffice 的出来，把他变成服务，用程序去调用他。</p>]]></content>
      
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel设置最小行高</title>
      <link href="/2022/ggzyo25qm594eqcr/"/>
      <url>/2022/ggzyo25qm594eqcr/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有个需求，导出导出的 Excel 需要设置最小高度，比如最小高度是 56px，当内容的高度低于 56 的时候，行高设置为 56，当内容高度大于 56 的时候，根据内容高度自适应。</p><p>因为 excel 的行高只能设置固定大小，或者设置自适应，而没办法设置上述最小行高，所以普通的办法是做不到这个需求的。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>可以通过设置字体大小来解决这个最小行高问题。也不知道这是 excel 的 feat 还是 bug。</p><ol><li><p>设置单元格格式——对齐——自动换行——确定</p></li><li><p>选中一列不使用的列(空白列)，把字体设置一下，这样就有了一个最小行高，比如如果字体大小是 18，那么最小行高就是 22.5。</p></li></ol><p>这样可以解决问题，但是相当于废了一个 cell，不过可以接受。</p><p>如果换成代码实现的话，可以用 poi 去按照上述步骤设置，当然也可以自己提前编辑好一个模版文件，<br>然后使用 poi 直接 copy 模版文件的格式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决poi插入的换行符无法被复制的问题</title>
      <link href="/2022/cddgaa/"/>
      <url>/2022/cddgaa/</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 word 中有两种换行，一种是直接按下回车的”段落换行”<img src="/images/1667556405124-28604506-8839-4231-8038-fd17fc9e1802.png">而另一种换行符是按下 shift + 回车打出来的换行符 <img src="/images/1667556470690-9489e920-0b49-4c04-8984-f0e11a0b40f4.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 第一种换行符</span><br><span class="line">org.apache.poi.xwpf.usermodel.XWPFRun#addCarriageReturn()</span><br><span class="line"></span><br><span class="line">## 第二种换行符</span><br><span class="line">org.apache.poi.xwpf.usermodel.XWPFRun#addBreak()</span><br></pre></td></tr></table></figure><p>第一种换行符比较符合我们日常的使用习惯，但是使用上述 api 打出来的换行符可以在 word 中被正常识别，但是无法通过复制的方式把这个换行符复制到一段文本中。<br>举个例子，如下 word 内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行</span><br><span class="line">第二行</span><br><span class="line">第三行</span><br></pre></td></tr></table></figure><p>复制到文本文件中变成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一行 第二行 第三行</span><br></pre></td></tr></table></figure><p>而我们直接在 word 中敲出来的回车换行符可以被正确复制。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>因为直接使用 poi 的 api 无法解决这个问题，所以只能另辟蹊径。最后参考<a href="https://stackoverflow.com/questions/14830667/insert-a-line-break-inside-a-paragraph-in-xwpfdocument">https://stackoverflow.com/questions/14830667/insert-a-line-break-inside-a-paragraph-in-xwpfdocument</a> 这篇文章实现的。<br>既然换行符不行，那就新建一个段落来解决这个问题。</p><p>原文代码如下，因为我这边涉及到业务代码，我就不贴出来了，本质都是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">replaceElementInParagraphs</span><span class="params">(List&lt;XWPFParagraph&gt; xwpfParagraphs,</span></span><br><span class="line"><span class="params">                                              Map&lt;String, String&gt; replacedMap)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!searchInParagraphs(xwpfParagraphs, replacedMap)) &#123;</span><br><span class="line">            replaceElementInParagraphs(xwpfParagraphs, replacedMap);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">searchInParagraphs</span><span class="params">(List&lt;XWPFParagraph&gt; xwpfParagraphs, Map&lt;String, String&gt; replacedMap)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(XWPFParagraph xwpfParagraph : xwpfParagraphs) &#123;</span><br><span class="line">            List&lt;XWPFRun&gt; xwpfRuns = xwpfParagraph.getRuns();</span><br><span class="line">            <span class="keyword">for</span>(XWPFRun xwpfRun : xwpfRuns) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">xwpfRunText</span> <span class="operator">=</span> xwpfRun.getText(xwpfRun.getTextPosition());</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : replacedMap.entrySet()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (xwpfRunText != <span class="literal">null</span> &amp;&amp; xwpfRunText.contains(entry.getKey())) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (entry.getValue().contains(<span class="string">&quot;\n&quot;</span>)) &#123;</span><br><span class="line">                            String[] paragraphs = entry.getValue().split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                            entry.setValue(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                            createParagraphs(xwpfParagraph, paragraphs);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        xwpfRunText = xwpfRunText.replaceAll(entry.getKey(), entry.getValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                xwpfRun.setText(xwpfRunText, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createParagraphs</span><span class="params">(XWPFParagraph xwpfParagraph, String[] paragraphs)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(xwpfParagraph!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; paragraphs.length; i++) &#123;</span><br><span class="line">                <span class="type">XmlCursor</span> <span class="variable">cursor</span> <span class="operator">=</span> xwpfParagraph.getCTP().newCursor();</span><br><span class="line">                <span class="type">XWPFParagraph</span> <span class="variable">newParagraph</span> <span class="operator">=</span> document.insertNewParagraph(cursor);</span><br><span class="line">                newParagraph.setAlignment(xwpfParagraph.getAlignment());</span><br><span class="line">                newParagraph.getCTP().insertNewR(<span class="number">0</span>).insertNewT(<span class="number">0</span>).setStringValue(paragraphs[i]);</span><br><span class="line">                newParagraph.setNumID(xwpfParagraph.getNumID());</span><br><span class="line">            &#125;</span><br><span class="line">            document.removeBodyElement(document.getPosOfParagraph(xwpfParagraph));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> poi </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04修改静态ip</title>
      <link href="/2022/avuapr/"/>
      <url>/2022/avuapr/</url>
      
        <content type="html"><![CDATA[<p>给自己瞎折腾的服务器配置一个固定的静态 ip，虽然这玩意对内网穿透没啥用，但是总不能在内网中也从外网走一圈吧，在内网中直接用 ip 访问就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/netplan/00-installer-config.yaml</span><br></pre></td></tr></table></figure><p>修改文件内容为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens160:</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.50</span><span class="number">.8</span><span class="string">/24</span>] <span class="comment">#要修改的ip地址</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span> <span class="comment">#no为静态 yes为自动获取</span></span><br><span class="line">      <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.50</span><span class="number">.4</span> <span class="comment">#网关地址</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.50</span><span class="number">.4</span>] <span class="comment">#dns服务器，多个之间逗号分隔</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>静态 ip 下一定要配置 dns 服务器，否则无法访问外网</p><p>使设置生效</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">netplan</span> <span class="string">apply</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理https忽略证书错误</title>
      <link href="/2022/no7oni/"/>
      <url>/2022/no7oni/</url>
      
        <content type="html"><![CDATA[<p>因为有需求吧 esxi 暴露到公网上，内网穿透之后，然后反向代理到对应的域名上。这个时候一直 502 错误。因为 esxi 那边暴露的是 443 端口，而证书刚好无效。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> esxi.<span class="variable">$&#123;DOMAIN_NAME&#125;</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>  https://host.docker.internal:7002;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>  X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>  X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-NginX-Proxy <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键部分</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装frp</title>
      <link href="/2022/ib4gf3/"/>
      <url>/2022/ib4gf3/</url>
      
        <content type="html"><![CDATA[<h2 id="下载-frp"><a href="#下载-frp" class="headerlink" title="下载 frp"></a>下载 frp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.44.0/frp_0.44.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -vxzf frp_0.44.0_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.44.0_linux_amd64 frp</span><br></pre></td></tr></table></figure><h2 id="设置开启启动"><a href="#设置开启启动" class="headerlink" title="设置开启启动"></a>设置开启启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建并编辑 service文件</span></span><br><span class="line">vim /lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=frps daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里换成你的frp目录</span></span><br><span class="line">ExecStart=/root/app/frp/frps -c /root/app/frp/frps.ini</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>这里是我主要用作服务端，因此我只设置了服务端的开机自启动，可以根据需求自行设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动frp</span></span><br><span class="line">systemctl start frps</span><br><span class="line"><span class="comment"># 设置frp自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> ubuntu </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N5105安装ESXi</title>
      <link href="/2022/sgemn2/"/>
      <url>/2022/sgemn2/</url>
      
        <content type="html"><![CDATA[<h2 id="软件准备"><a href="#软件准备" class="headerlink" title="软件准备"></a>软件准备</h2><p><a href="https://www.ventoy.net/cn/">Ventoy </a><br>PE 工具，这里我使用的是<a href="https://www.wepe.com.cn/download.html">微 PE</a><br>带网卡驱动的 ESXI iso 文件</p><p>我打包了需要的软件，懒得找的可以直接用我的。<br>链接：<a href="https://pan.baidu.com/s/1hHHfWzF_yR6zN8UhbG9S2g?pwd=p2bd">https://pan.baidu.com/s/1hHHfWzF_yR6zN8UhbG9S2g?pwd&#x3D;p2bd</a><br>提取码：p2bd</p><h2 id="刻录-U-盘"><a href="#刻录-U-盘" class="headerlink" title="刻录 U 盘"></a>刻录 U 盘</h2><ol><li>把 Ventory 安装到 U 盘中</li></ol><p><img src="/images/1664367921005-710672fe-4df3-41ec-acb6-04b7be723791.png"><br><img src="/images/1664368346556-6c4ec54d-a655-4586-aec7-aec1a4de9694.png"></p><ol start="2"><li>使用微 PE 制作 iso 镜像</li></ol><p><img src="/images/1664537354599-da0c8f29-d3e3-4aec-ba66-dc945703cffe.png"></p><ol start="3"><li>将制作好的的 PE 以及 ESXI 的 iso 文件复制到 U 盘中</li></ol><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><ol><li>进入 bios 关闭安全 boot。</li><li>如果要安装的系统盘需要格式化，那么开机的时候按 F7，选择微 PE 系统进去格式化一下。如果不需要则跳过这一步。</li><li>开机的时候按 F7，选择 ESXi 的系统进入，跟着步骤走即可。</li><li>配置 ESXi 的网络，这里我使用的是 192.168.50.X 网段，可以根据自己的需求调整。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> 软路由 </tag>
            
            <tag> N5105 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis缓存机制</title>
      <link href="/2022/ygenbp/"/>
      <url>/2022/ygenbp/</url>
      
        <content type="html"><![CDATA[<p>正如大多数持久层框架一样，MyBatis 同样提供了一级缓存和二级缓存的支持。</p><p>MyBatis 的缓存分为一级缓存和二级缓存，两种缓存的缓存粒度是一样的，都是对应一条 sql 查询语句，但是二者的生命周期是不一样的，一级缓存的生命周期是 SqlSession 对象的使用期间，随着 SqlSession 对象的死亡而消失；二级缓存如果没有更新数据的话，最长可以和应用的生命周期一样长。</p><p>首先查询二级缓存，然后再查询一级缓存。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存也叫本地缓存，在 MyBatis 中，一级缓存是在会话(SqlSession)层面实现的，这就说明一级缓存作用范围只能在同一个 SqlSession 中，跨 SqlSession 是无效的。当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空。<br>MyBatis 中一级缓存是默认开启的，不需要任何配置。</p><blockquote><p>这里我加一点我的个人理解（纯个人理解有争议我们可以讨论）MyBatis 的一级缓存存在的基础条件或者说理论依据是 MySql 的默认的事物隔离级别是可重复读，在同一个事务里面不管怎么读结果都是一样的，因此可以缓存。如果不是可重复读的话，而是和别的数据库一样是读已提交，那么这个缓存可能就会出问题。当然你也可以换种角度理解我这个观点，也就是数据库的隔离界别如果不是可重复读，那么使用 MyBatis 的一级缓存就会变成可重复的的效果，会出现问题。</p></blockquote><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>二级缓存需要手动开启。</p><p>开启二级缓存以后，会被多个 SqlSession 共享，所以它是一个全局缓存。因此它的查询流程是先查二级缓存，再查一级缓存，最后再查数据库。</p><p>二级缓存相对于一级缓存来说，实现了 SqlSession 之间缓存数据的共享，同时缓存粒度也能够到 namespace 级别，并且还可以通过 Cache 接口实现类不同的组合，对 Cache 的可控性也更强。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复字符的最长子串</title>
      <link href="/2022/gxy2yg/"/>
      <url>/2022/gxy2yg/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">原题链接</a><br>这是一道比较简单的滑动窗口应用题。之所以写出来是因为面试遇到了，当时还没做出来 😭。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>以例题的 abcabcbb 为例。设置一个滑动窗口，当窗口为 abc 的时候满足题意，但是这个时候 a 入队这样就不满足了，于是需要把窗口左边移动到上一个 a 的位置，让窗口变成 bca，而如何知道上一个 a 的位置，我们就需要一个结构来存储每个字符的上个位置，这个结构很明显用 Map 就可以了。当然这里还有一个易错点就是这个 a 必须在当前窗口里面，否则是没必要移动的。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>,end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end &lt; len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(s.charAt(end)) != <span class="literal">null</span>)&#123;</span><br><span class="line">                start = Math.max(start,map.get(s.charAt(end)) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(max,end - start + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(end),end);</span><br><span class="line">            end++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker客户端访问远程Docker Engine</title>
      <link href="/2022/ubzyk2/"/>
      <url>/2022/ubzyk2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-开启-2375-端口"><a href="#1-开启-2375-端口" class="headerlink" title="1. 开启 2375 端口"></a>1. 开启 2375 端口</h2><p>这里以<strong>ubuntu20.04</strong>为例<br>编辑文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>ExecStart 属性添加参数 -H tcp:&#x2F;&#x2F;0.0.0.0:2375<br><img src="/images/1661652340332-5fdde1fb-96d4-4b96-99db-48d0a418533d.png"><br>加载 docker 守护进程<br>重启 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>注意 ⚠️ <strong>防火墙无需开启 2375 端口放行</strong></p><h2 id="2-配置-ssh"><a href="#2-配置-ssh" class="headerlink" title="2. 配置 ssh"></a>2. 配置 ssh</h2><p>这里没什么好说的，配置本地访问的 ssh 密钥，略</p><h2 id="3-创建-docker-context"><a href="#3-创建-docker-context" class="headerlink" title="3. 创建 docker context"></a>3. 创建 docker context</h2><p>本地创建 docker context</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker context create &lt;context name&gt; --docker <span class="string">&quot;host=ssh://&lt;user&gt;@&lt;host&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>切换到刚才的 context</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker context use &lt;context name&gt;</span><br></pre></td></tr></table></figure><p>这样就可以在本地直接操作远程的 docker 了</p><h3 id="切换到本地"><a href="#切换到本地" class="headerlink" title="切换到本地"></a>切换到本地</h3><p>如果想切回本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker context use default</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决无线网卡偶尔搜不到wifi的问题（信道不统一）</title>
      <link href="/2022/gtho82/"/>
      <url>/2022/gtho82/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>家里一台笔记本电脑，还有一个无线网卡偶尔搜不到 wifi，不是必现，但是 mac 电脑还有一些物联网设备，手机从来没有出现这个问题。</p><h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>因为绝大部分设备都是没有这个问题的， 因此一开始怀疑是那台电脑的驱动问题，尝试升级了驱动但是并没有解决问题。</p><p>家里两个路由器，我就想用另外一个试验一下，发现可以稳定搜到。因为着急用网，就想着用平时不常用的那个路由器中继一下，电脑连上先用起来，发现中继之后就搜不到信号了。这个时候我开始怀疑是信号的问题。</p><p>网上找了一下关键字，说是可能两台设备的信道范围不同。</p><p>看了一下 Wi-Fi 的信道，设置是自动的范围是 5-13<br><img src="/images/1660917945098-6a4132c0-4766-4a75-a3b1-9f887de98286.png"></p><p>在看了一下网卡的信道发现范围是 1-11<br><img src="/images/1660918127078-bf52dba7-e966-4627-96e4-231014c08d08.png"><br>所以 12，13 两个信道的信号可能就接受不到，这也和偶发的场景对上了，调整网卡的信道配置<br><img src="/images/1660918196794-4beeb843-fba0-4f3b-862b-3ac81bc4a2a9.png"><br>问题解决</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于code-server搭建自己的开发环境</title>
      <link href="/2022/hbobkc/"/>
      <url>/2022/hbobkc/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平时用的设备不同，win、mac、linux 都用，想统一一下开发环境。而刚好看到 coder-server 这个开源的 WebIDE，这样把 code-server 部署到服务器上，每个环境只要又个浏览器就可以共享部署在服务器上的环境。</p><h2 id="定制过程"><a href="#定制过程" class="headerlink" title="定制过程"></a>定制过程</h2><p>定制一个带有 code-server 的镜像，既包含 code-server 又包含自己想要的工具。<br>下面列出主要过程，完整版可以直接看<a href="https://github.com/furacas/my-code-server/blob/main/Dockerfile">这个文件</a></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> codercom/code-server:latest</span><br></pre></td></tr></table></figure><h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git config</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> git config --global --add pull.rebase <span class="literal">false</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global --add user.name furacas \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global --add user.email s.furacas@outlook.com \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global core.editor vim \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; git config --global init.defaultBranch master</span></span><br></pre></td></tr></table></figure><h3 id="安装-node-环境"><a href="#安装-node-环境" class="headerlink" title="安装 node 环境"></a>安装 node 环境</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node env</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh &gt;&gt; /home/coder/install_nvm.sh \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; . /home/coder/install_nvm.sh \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /home/coder/install_nvm.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> NODE_VERSION <span class="number">14.18</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">source</span> ~/.nvm/nvm.sh \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; nvm install <span class="variable">$NODE_VERSION</span> \</span></span><br><span class="line"><span class="language-bash">    $$ nvm <span class="built_in">alias</span> default <span class="variable">$NODE_VERSION</span> \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; nvm use default</span></span><br></pre></td></tr></table></figure><h3 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zsh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -o- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh &gt;&gt; ~/oh_my_zsh.sh \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;y&#x27;</span> | . ~/oh_my_zsh.sh \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; <span class="built_in">rm</span> -rf  ~/oh_my_zsh.sh \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting \</span></span><br><span class="line"><span class="language-bash">  &amp;&amp; sed -i <span class="string">&quot;s/plugins=(git.*)$/plugins=(git zsh-syntax-highlighting zsh-autosuggestions)/&quot;</span> ~/.zshrc</span></span><br></pre></td></tr></table></figure><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vscode plugin</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> HOME=/home/coder code-server \</span></span><br><span class="line"><span class="language-bash">--user-data-dir=/home/coder/.local/share/code-server \</span></span><br><span class="line"><span class="language-bash">--install-extension equinusocio.vsc-material-theme \</span></span><br><span class="line"><span class="language-bash">  --install-extension k--kato.intellij-idea-keybindings \</span></span><br><span class="line"><span class="language-bash">  --install-extension eamodio.gitlens \</span></span><br><span class="line"><span class="language-bash">  --install-extension tabnine.tabnine-vscode</span></span><br></pre></td></tr></table></figure><h2 id="Github-Action-构建"><a href="#Github-Action-构建" class="headerlink" title="Github Action 构建"></a>Github Action 构建</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 配置触发workflow的事件</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="comment"># master分支有push时触发此workflow</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;main&quot;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">push_to_registry:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span> <span class="string">image</span> <span class="string">to</span> <span class="string">Docker</span> <span class="string">Hub</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">out</span> <span class="string">the</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Log</span> <span class="string">in</span> <span class="string">to</span> <span class="string">Docker</span> <span class="string">Hub</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/login-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.DOCKERHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">and</span> <span class="string">push</span> <span class="string">Docker</span> <span class="string">image</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">docker/build-push-action@v2</span> <span class="comment"># docker build &amp; push</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">          <span class="attr">push:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">tags:</span> <span class="string">furacas/code-server:latest</span></span><br></pre></td></tr></table></figure><h2 id="账号配置"><a href="#账号配置" class="headerlink" title="账号配置"></a>账号配置</h2><p>在实际的使用过程中，还需要有一些账号信息，但是这些信息不方便打在公开镜像里，所以在实际的使用过程中我再上述镜像的基础上又包了一层。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 瞎折腾 </tag>
            
            <tag> code-server </tag>
            
            <tag> Github Action </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备份服务器文件至百度网盘</title>
      <link href="/2022/lzbt10/"/>
      <url>/2022/lzbt10/</url>
      
        <content type="html"><![CDATA[<h2 id="安装bypy"><a href="#安装bypy" class="headerlink" title="安装bypy"></a>安装<a href="https://github.com/houtianze/bypy">bypy</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install bypy</span><br></pre></td></tr></table></figure><h2 id="授权登陆"><a href="#授权登陆" class="headerlink" title="授权登陆"></a>授权登陆</h2><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bypy info</span><br></pre></td></tr></table></figure><p>访问出现的链接<br><img src="/images/1659798437553-e7026bff-5b6a-42cc-aaa6-0d330e3ac93a.png"><br>登陆之后，获取到授权码，输入授权码之后授权成功<br><img src="/images/1659798567038-879d44ef-f8ec-4100-b9a0-6bcaeec5249b.png"></p><h2 id="创建备份脚本"><a href="#创建备份脚本" class="headerlink" title="创建备份脚本"></a>创建备份脚本</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /backup/</span><br></pre></td></tr></table></figure><p>创建**backup_to_baidu.sh **内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backtar=`<span class="built_in">date</span> <span class="string">&#x27;+%Y%m%d%H%M%S&#x27;</span>` <span class="comment">#名称为当前时间年月日时分秒</span></span><br><span class="line">zip -r /backup/<span class="variable">$&#123;backtar&#125;</span>.zip  /root/app/  <span class="comment">#上传某个路径下的文件，以空格隔开，可以添加多个</span></span><br><span class="line">/usr/local/bin/bypy upload /backup/<span class="variable">$&#123;backtar&#125;</span>.zip <span class="comment">#上传的压缩文件</span></span><br><span class="line">find /backup -mtime +7 |grep .zip | xargs <span class="built_in">rm</span> -f  <span class="comment">#删除7天前生成的压缩包</span></span><br></pre></td></tr></table></figure><p>执行脚本测试备份是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh backup_to_baidu.sh</span><br></pre></td></tr></table></figure><h2 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>设置每天凌晨 2 点备份一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 * * * sh /backup/backup_to_baidu.sh</span><br></pre></td></tr></table></figure><p>重启 crond 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart crond</span><br></pre></td></tr></table></figure><p>如果是 ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart cron</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 百度网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>情侣风格的Hexo主题Brave</title>
      <link href="/2022/erp76h/"/>
      <url>/2022/erp76h/</url>
      
        <content type="html"><![CDATA[<h2 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h2><p>该主题最初版是 typeecho 主题<a href="https://github.com/zwying0814/Brave">Brave</a>移植过来的，感谢原作者 🙏。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images/1659618511529-ff225dca-b16f-4c0d-9aff-d6084dcb826a.png"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/images/1659618537058-0262f678-fb14-4237-8631-9a81b044cf2e.png"></h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="/images/1659618544667-2dca909a-dd73-40ac-a63d-baa1c208cb3f.png"></h2><h2 id="-3"><a href="#-3" class="headerlink" title=""></a><img src="/images/1659618549623-30772653-45c2-4396-84d6-e9b50ccd1c1e.png"></h2><p>演示地址 <a href="https://hexo-brave.furacas.com/">https://hexo-brave.furacas.com/</a></p><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-brave</span><br></pre></td></tr></table></figure><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>修改<code>_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: brave</span><br></pre></td></tr></table></figure><h3 id="安装祝福（评论）系统"><a href="#安装祝福（评论）系统" class="headerlink" title="安装祝福（评论）系统"></a>安装祝福（评论）系统</h3><p>目前支持 Waline 集成，安装参考<a href="https://waline.js.org/guide/get-started.html">https://waline.js.org/guide/get-started.html</a></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>新建<code>_config.brave.yml</code>文件<br>复制默认的<a href="https://github.com/furacas/hexo-theme-brave/blob/master/_config.yml">配置文件</a>的内容到到刚才新建的文件中<br>修改这些配置为您的配置</p><table><thead><tr><th>配置项</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td>lovebegin</td><td>恋爱开始时间</td><td>2017-07-27   ｜</td></tr><tr><td>banner</td><td>页面大图的图片地址</td><td>&#x2F;img&#x2F;banner.jpg</td></tr><tr><td>leftname</td><td>左侧情侣头像的名称</td><td>boyname</td></tr><tr><td>leftavatar</td><td>左侧情侣头像的图片地址</td><td>&#x2F;img&#x2F;boyavatar.jpg</td></tr><tr><td>rightname</td><td>右侧情侣头像的名称</td><td>grilname</td></tr><tr><td>rightavatar</td><td>右侧情侣头像的图片地址</td><td>&#x2F;img&#x2F;girlavatar.jpg</td></tr><tr><td>slogan</td><td>slogan</td><td>💕 愿你三冬暖，愿你天不寒 🍂</td></tr><tr><td>sitename</td><td>站点名称</td><td>💖 那年初夏 💖</td></tr><tr><td>waline</td><td>walin 服务端地址</td><td></td></tr><tr><td>lovelist.desc</td><td>lovelist 的描述</td><td></td></tr><tr><td>lovelist.status</td><td>lovelist 的完成状态</td><td>0</td></tr><tr><td>lovelist.img</td><td>lovelist 的图片地址</td><td></td></tr></tbody></table><p>配置项的图片地址均支持 url 和相对位置两种配置方式</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kali 暴力破解wifi密码</title>
      <link href="/2022/lffw61/"/>
      <url>/2022/lffw61/</url>
      
        <content type="html"><![CDATA[<h2 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h2><p>本文仅用于学习研究，切勿用于非法用途</p><h2 id="wifi-密码破解"><a href="#wifi-密码破解" class="headerlink" title="wifi 密码破解"></a>wifi 密码破解</h2><p>网上一大堆教程都是用<code>aircrack-ng</code>抓包，操作过程比较繁琐，明明 kali 都内置了自动化的<code>wifite</code>了。<br>为了方便后面操作先切换到 root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><p>启动<code>wifite</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifite</span><br></pre></td></tr></table></figure><p>选择一个支持监听的网卡，如果不支持的话，淘宝 20 快可以搞到<br><img src="/images/1658926621769-71b84339-4ca8-4fa6-a82a-06ab0d47bfb1.png"><br>这样就开始自动扫描 wifi 信号了<br><img src="/images/1658923725918-8497ae8b-d3fa-4c07-a8e9-11cc62889fc2.png"><br>当扫描到你想要的 wifi 的时候按一下 <code>Ctrl + C</code>按一下就好了，可能反应有些慢<br>然后选择你要破解 wifi 的编号，或者输入 all 代表全部。</p><p>这里 wifi 可能有几种情况<br><img src="/images/1658927879706-b6155ea8-1169-4561-bb57-a9759d9d099e.png"><br>可以看到有些的 WPS 是 yes，有些是 no。不同的脚本处理的方式是不同的。但基本都可以自动化。</p><h3 id="选择-WPS-是-no-的"><a href="#选择-WPS-是-no-的" class="headerlink" title="选择 WPS 是 no 的"></a>选择 WPS 是 no 的</h3><p>选择了之后，脚本会进行自动化操作，脚本会尝试破解，当然一般情况下是破解不出来的。因为内置的字典表太弱了<br><img src="/images/1658926833066-669dc262-4971-451c-964c-22fea159efe9.png"><br>等他破解失败之后我们获取到刚才生成的文件<code>hs/handshake_2412016_58-41-20-91-3F-3F_2022-07-27T08-58-37.cap</code><br>开始尝试使用我们自己的字典表破解<br>这里我们使用 kali 自带的弱密码表来进行破解，当然这里只是演示，这份弱密码是老外的，并不一定符合我们的习惯。</p><p>解压 kali 的弱密码列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d /usr/share/wordlists/rockyou.txt.gz</span><br></pre></td></tr></table></figure><p>开始破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aircrack-ng -w /usr/share/wordlists/rockyou.txt hs/handshake_2412016_58-41-20-91-3F-3F_2022-07-27T08-58-37.<span class="built_in">cap</span></span><br></pre></td></tr></table></figure><p>然后就会自动进行破解了<br><img src="/images/1658924228983-e689f097-6593-4d0f-a796-5fad4fb349e5.png"><br>这里可以看出来能否破解的主要因素就是密码表是强大了。</p><p>这里我准备了 3.95G 的常用 wifi 密码字典。可以关注公众号<strong>全栈编程笔记</strong>回复<strong>破解字典</strong>进行下载<br><img src="/images/1658933196404-c320fcf7-d55f-48d0-97f6-76ecfcb27abb.png"></p><h3 id="选择-WPS-是-yes-的"><a href="#选择-WPS-是-yes-的" class="headerlink" title="选择 WPS 是 yes 的"></a>选择 WPS 是 yes 的</h3><p>这种脚本会尝试破解 PIN</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images/1658928017973-ae994123-aadf-48da-8c93-f28f84107a7d.png"></h2><p>虽然路由器会防止 PIN 攻击，但这种跑出来基本只是时间问题（嗯，除非撞大运，否则没个几天跑不出来）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随身wifi使用体验</title>
      <link href="/2022/vfzd55/"/>
      <url>/2022/vfzd55/</url>
      
        <content type="html"><![CDATA[<p>因为一些原因需要短租一段时间，新家没有网，正好淘宝推荐给我了一款随身 wifi，杂牌子也有，华为小米的也有，几乎清一色的好评，在淘宝上买了两次杂牌子不太满意，又在京东上选择了一个号称京东参与研发的<code>JDRead</code>使用了一天感觉没达到预期的效果也退了。</p><h2 id="关于套餐价格"><a href="#关于套餐价格" class="headerlink" title="关于套餐价格"></a>关于套餐价格</h2><p>这是我不能满意的很主要原因，性价比低，套餐是 79&#x2F;月 1500G。正常情况下肯定用不到 1500G，可以简单认为无限流量。但是这个 79 元相对于他的乌龟一样的速度（速度会在关于网速详细）就很贵了。而且他可供选择的套餐很少，79 这个几乎是最便宜的了。而淘宝上某些产品有便宜的小流量套餐，但大多数每个月只能挑选一个，用完了就只能下个月换了，这点也很坑，需要在之前问清楚。</p><h2 id="关于网速"><a href="#关于网速" class="headerlink" title="关于网速"></a>关于网速</h2><p>我只能说龟速，速度不如正常的 4G 流量，还卖那么贵，所以为什么不直接花钱买流量。而且部分产品到了一定流量还限速。<br>网速还有一个坑点可能大家平时也不注意，在浏览器或者下载软件上面显示的网络是 MB&#x2F;s 或者 KB&#x2F;s，但是网速的计量一般都是 Mb&#x2F;s 或者 Kb&#x2F;s，这中间差了八倍。这点可能不是他故意坑你，但是还是要注意一下两者之前的区别，免得心里预期不到位。</p><h2 id="关于好评"><a href="#关于好评" class="headerlink" title="关于好评"></a>关于好评</h2><p>这类产品一般都是好评送流量，所以才是清一色的好评，但是这里还有另外的坑点，大多送的流量是有时间限制的，比如 3 天 1500G。他只会跟你说送你 1500G，并不会跟你说 3 天。这点也要问清楚。</p><h2 id="关于大流量"><a href="#关于大流量" class="headerlink" title="关于大流量"></a>关于大流量</h2><ol><li>流量虚报，这个很严重，基本都会有。</li><li>物联卡，这个有的会直接告诉你这是物联卡，有的不会，但本质也是物联卡。关于物联卡的坑点网上可以直接找到。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基本可以满足上网需求，可以用来应急，但是平时用就算了吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随身 wifi </tag>
            
            <tag> 产品测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Antlr的计算器程序</title>
      <link href="/2022/zxee2q/"/>
      <url>/2022/zxee2q/</url>
      
        <content type="html"><![CDATA[<h2 id="定义语法"><a href="#定义语法" class="headerlink" title="定义语法"></a>定义语法</h2><p><code>Calc.g4</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">grammar Calc;</span><br><span class="line"></span><br><span class="line">prog: stat+;</span><br><span class="line"></span><br><span class="line">stat: expr NEWLINE         # printExpr</span><br><span class="line">    | NEWLINE              # blank</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">expr: expr MUL expr # Mul</span><br><span class="line">    | expr DIV expr # Div</span><br><span class="line">    | expr ADD expr # Add</span><br><span class="line">    | expr SUB expr # Sub</span><br><span class="line">    | INT                        # int</span><br><span class="line">    | &#x27;(&#x27; expr &#x27;)&#x27;               # parens</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">MUL : &#x27;*&#x27; ;</span><br><span class="line">DIV : &#x27;/&#x27; ;</span><br><span class="line">ADD : &#x27;+&#x27; ;</span><br><span class="line">SUB : &#x27;-&#x27; ;</span><br><span class="line">INT : [0-9]+ ;</span><br><span class="line">NEWLINE:&#x27;\r&#x27;? &#x27;\n&#x27; ;</span><br><span class="line">WS : [ \t]+ -&gt; skip;</span><br></pre></td></tr></table></figure><h2 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h2><p>使用插件或者 jar 根据语法生成代码。<br>安装 idea 插件</p><p><img src="/images/1658407198607-8f33787a-4b18-4407-b531-20547bdf9755.png"><br>生成词法分析和语法分析的代码<br><img src="/images/1658407198451-d28c762e-f7bc-4363-b7d8-a5e092368884.png"></p><h2 id="编写程序代码"><a href="#编写程序代码" class="headerlink" title="编写程序代码"></a>编写程序代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lmikoto.calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.lmikoto.calc.gen.CalcBaseVisitor;</span><br><span class="line"><span class="keyword">import</span> io.github.lmikoto.calc.gen.CalcParser;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘阳</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/9/18 1:01 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalcEvalVisitor</span> <span class="keyword">extends</span> <span class="title class_">CalcBaseVisitor</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitPrintExpr</span><span class="params">(CalcParser.PrintExprContext ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visit(ctx.expr());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitInt</span><span class="params">(CalcParser.IntContext ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(ctx.INT().getText());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitMul</span><span class="params">(CalcParser.MulContext ctx)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">left</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">0</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">right</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> left * right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitDiv</span><span class="params">(CalcParser.DivContext ctx)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">left</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">0</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">right</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> left / right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitAdd</span><span class="params">(CalcParser.AddContext ctx)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">left</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">0</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">right</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> left + right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitSub</span><span class="params">(CalcParser.SubContext ctx)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">left</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">0</span>));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">right</span> <span class="operator">=</span> visit(ctx.expr(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> left - right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">visitParens</span><span class="params">(CalcParser.ParensContext ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> visit(ctx.expr());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写-main-方法执行"><a href="#编写-main-方法执行" class="headerlink" title="编写 main 方法执行"></a>编写 main 方法执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.github.lmikoto.calc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.lmikoto.calc.gen.CalcLexer;</span><br><span class="line"><span class="keyword">import</span> io.github.lmikoto.calc.gen.CalcParser;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStreams;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CodePointCharStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CodePointCharStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> CharStreams.fromString(<span class="string">&quot;6 + (1 + 5) * 4+ 6 / 2 \n&quot;</span>);</span><br><span class="line">        <span class="type">CalcLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcLexer</span>(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonTokenStream</span> <span class="variable">tokenStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonTokenStream</span>(lexer);</span><br><span class="line">        <span class="type">CalcParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcParser</span>(tokenStream);</span><br><span class="line">        <span class="type">ParseTree</span> <span class="variable">parseTree</span> <span class="operator">=</span> parser.prog();</span><br><span class="line">        <span class="type">CalcEvalVisitor</span> <span class="variable">visitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CalcEvalVisitor</span>();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rtn</span> <span class="operator">=</span> visitor.visit(parseTree);</span><br><span class="line">        System.out.println(rtn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> antlr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moviepy竖屏转横屏</title>
      <link href="/2022/ul899l/"/>
      <url>/2022/ul899l/</url>
      
        <content type="html"><![CDATA[<p>本文已废弃，moviepy 效率真是太慢了，推荐使用 ffmpeg</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>解决思路的本质还是 resize，不是简单的调整大小。<br>1 . 将视频放大，可以填满屏幕并做模糊处理；<br>2 . 将视频缩小，居中位置展示；<br>将 1.2 合并</p><p>效果如图<br><img src="/images/1658308404730-6588cd24-342a-45f9-94e3-391d191634c1.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> skimage.filters <span class="keyword">import</span> _gaussian</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blur</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="keyword">return</span> _gaussian.gaussian(image.astype(<span class="built_in">float</span>), sigma=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">src = <span class="string">&quot;test.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取待转换的视频</span></span><br><span class="line">clip1 = VideoFileClip(src)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将视频放大并加蒙版遮罩</span></span><br><span class="line">tempClip2 = VideoFileClip(src, audio=<span class="literal">False</span>, has_mask=<span class="string">&quot;True&quot;</span>).resize(<span class="number">4</span>)</span><br><span class="line">clip2 = tempClip2.fl_image(blur)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将小的视频叠在大视频的居中位置</span></span><br><span class="line">temp = CompositeVideoClip([clip2, clip1.set_pos(<span class="string">&quot;center&quot;</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对叠好的视频进行剪切</span></span><br><span class="line">final = temp.crop(x1=<span class="number">0</span>, x2=clip2.w, y1=(clip2.h - clip1.h) / <span class="number">2</span>, y2=clip1.h + (clip2.h - clip1.h) / <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出编辑完成的视频</span></span><br><span class="line">final.resize(height=clip1.h).write_videofile(<span class="string">&quot;./target.mp4&quot;</span>, audio_codec=<span class="string">&quot;aac&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> moviepy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向汇编基础</title>
      <link href="/2022/kq0iqk/"/>
      <url>/2022/kq0iqk/</url>
      
        <content type="html"><![CDATA[<h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><p>mov 是赋值语句<br>例：</p><ul><li><code>mov 地址,0x123456</code> 把 0x123456 赋给地址位置</li><li><code>mov 地址1,地址2</code>把地址 2 位置的值赋给地址 1 位置</li></ul><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>call 是调用函数<br>如果有参数需要用 push 传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push 0x01</span><br><span class="line">call xxx</span><br></pre></td></tr></table></figure><h2 id="inc"><a href="#inc" class="headerlink" title="inc"></a>inc</h2><p>inc 就是+1</p><h2 id="dec"><a href="#dec" class="headerlink" title="dec"></a>dec</h2><p>dec 就是-1</p><h2 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h2><p>jmp 是无条件跳转。可以跟地址也可以跟函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmp 地址</span><br><span class="line">jmp 函数</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>向地址-4 的地方压入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">push 0x5</span><br></pre></td></tr></table></figure><h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2><p>加法运算</p><h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>减法运算</p><h2 id="imul"><a href="#imul" class="headerlink" title="imul"></a>imul</h2><p>带符号乘法运算</p><h2 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h2><p>不带符号乘法运算</p><h2 id="idiv"><a href="#idiv" class="headerlink" title="idiv"></a>idiv</h2><p>带符号除法运算</p><h2 id="div"><a href="#div" class="headerlink" title="div"></a>div</h2><p>不带符号除法运算</p><h2 id="子程序（函数）"><a href="#子程序（函数）" class="headerlink" title="子程序（函数）"></a>子程序（函数）</h2><p>子程序的汇编一定以以下代码开头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp,esp</span><br></pre></td></tr></table></figure><p>一定以以下代码结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,ebp</span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2022/dms1u5/"/>
      <url>/2022/dms1u5/</url>
      
        <content type="html"><![CDATA[<p>KMP 是一种<strong>字符串的模式匹配</strong>算法，可以在最多只遍历一遍主串的情况下，实现两个字符串的匹配。时间复杂度 O(m+n)</p><h2 id="字符串匹配问题"><a href="#字符串匹配问题" class="headerlink" title="字符串匹配问题"></a>字符串匹配问题</h2><p>子串的定位操作通常称为串的模式匹配，他求的是字串（通常成为模式串）在主串中的位置。<br>很容易想到一种朴素的暴力解法。<br>直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(string S,string T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;S.<span class="built_in">length</span>() &amp;&amp; j &lt; T.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j == T.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述算法中，分别用计数指针 i，j 指示主串 S 和模式串 T 中当前正在比较字符的位置。从主串 S 的第一个字符开始，与模式串的第一个字符进行比较，若相等，则继续逐个比较后序的字符，否则从主串的下一个字符起，重新和模式串的字符进行比较，以此类推，直到模式串 T 中的每个字符依次和主串中的一个连续的字符序列相等，则匹配成功。否则匹配不成功。<br>这种暴力尝试的最坏时间复杂度是 O(n*m)其中 n 和 m 是主串和模式串的长度。<br>演示动画如下<br><img src="/images/1658210166228-3e3ecdd0-9c57-40d6-b450-7179c225f9fb.gif"></p><h2 id="KMP-算法"><a href="#KMP-算法" class="headerlink" title="KMP 算法"></a>KMP 算法</h2><p>在上述动画演示中，第三趟匹配中 i&#x3D;6，j&#x3D;4 的字符比较不想等，于是又从 i&#x3D;3，j&#x3D;0 重新开始比较，然而仔细观察一下就会发现，i&#x3D;3，j&#x3D;0、i&#x3D;4，j&#x3D;0、i&#x3D;5，j&#x3D;0 这三次比较都是不必进行的，因为在第三趟的部分匹配结果上我们就已经知道了主串的第 3、4、5 的字符是 b、c、a。而模式串的第一个字符是 a 我们也是知道的，所以 3、4 两个位置可以直接跳过，因为一定不符合，而 5 的位置不需要比较，因为一定符合，所以可以直接进心 i&#x3D;6、j&#x3D;1 的比较。</p><p>我们利用一下这个思想改良一下上述算法。动画演示如下<br><img src="/images/1658230736727-8327b1bc-f35a-414f-8c9a-ba7048859050.gif"><br>用代码实现一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">Index</span><span class="params">(string S,string T,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;S.<span class="built_in">length</span>() &amp;&amp; j &lt; (<span class="type">int</span>)T.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(j == T.<span class="built_in">length</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T.<span class="built_in">length</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码和上面的代码的主要有两处改动，第一处是 13 行，匹配失败的时候不回溯而是查表，j 跳转到下一个应该匹配的位置。第二处是第 6 行的判断加上了<code>j == -1</code>的判断，这相当于一个 flag，代表第一个就匹配失败的意思，下面求 next 数组的过程会提到。</p><h3 id="next-数组计算"><a href="#next-数组计算" class="headerlink" title="next 数组计算"></a>next 数组计算</h3><p>在上述算法实现中直接使用了一个 next 数组来表示匹配失败之后 j 应该从哪个位置重新匹配。那么这个 next 数组如何计算呢。<br>以上述模式串 T<code>abcac</code>为例：<br>next[0]一定是-1，这个-1 只是一个 flag 位，只要去不到真正数组中的位置即可，这个标记位代表的意思是第一个就匹配失败，主串指针需要右移。<br>next[1]一定是 0，模式串的第 1 个匹配失败，主串需要和模式串的第 0 个进行重新匹配。<br>next[2] &#x3D; next[3] &#x3D; 0 没有可以省略的匹配<br><strong>next[4] &#x3D; 1，因为如果在 j &#x3D; 4 的位置匹配失败，那么 j &#x3D; 3 时匹配成功的，那么 i -1 的位置一定是 a 所以可以省略掉第 0 个位置的判断。</strong></p><table><thead><tr><th>编号</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>T</td><td>a</td><td>b</td><td>c</td><td>a</td><td>c</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(string T,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; T.<span class="built_in">length</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">-1</span> || T[i] == T[j])</span><br><span class="line">&#123;</span><br><span class="line">++i;++j;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP-算法进一步优化"><a href="#KMP-算法进一步优化" class="headerlink" title="KMP 算法进一步优化"></a>KMP 算法进一步优化</h3><p>假如模式串 T &#x3D; “aaaab”那么 next 数组如下</p><table><thead><tr><th>编号</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>T</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>1</td><td>2</td><td>3</td></tr></tbody></table><p>假如在 j &#x3D; 3 的时候匹配失败，j &#x3D; 2 而此时 T[2] &#x3D; T[3] 所以在 2 这里肯定也会失败。j 跳转到 i,而此时 T[1] &#x3D; T[2]所以 1 这里也会失败。这些比较都是没有意义的，因此可以对 next 数组进行进一步的优化成如下</p><table><thead><tr><th>编号</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>T</td><td>a</td><td>a</td><td>a</td><td>a</td><td>b</td></tr><tr><td>next</td><td>-1</td><td>-1</td><td>-1</td><td>-1</td><td>3</td></tr></tbody></table><p>代码实现如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(string T,<span class="type">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; T.<span class="built_in">length</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">-1</span> || T[i] == T[j])</span><br><span class="line">&#123;</span><br><span class="line">++i;++j;</span><br><span class="line">next[i] = j;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS修改依赖代码逻辑</title>
      <link href="/2022/uggvzr/"/>
      <url>/2022/uggvzr/</url>
      
        <content type="html"><![CDATA[<p>在开发的过程中，有一些依赖中有一些 bug 或者某一点点的逻辑不是我们想要的，这个时候我们需要去修改他的逻辑。在某些语言中这样的操作很麻烦的，需要把他的代码找到，然后修改重新打包，把依赖换成重新打包后的包。<br>而在 js 中是很容易的。可以把修改逻辑放到<code>postinstall</code>中，这样即使是团队开发，大家也都可以共享这段逻辑。而<a href="https://github.com/ds300/patch-package">patch-package</a>就是一个类似这样的工具，他可以更好，更规范话的帮助我们修改依赖中的逻辑</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我的博客是使用<code>butterfly</code>作为博客主题<code>gitalk</code>作为评论工具。在<code>butterfly</code>主题中，他的内嵌的<code>gitalk</code>集成逻辑是使用 url 的 path 作为<code>gitalk</code>的 id，而最近我正在优化博客的 SEO，所以文章的 url path 可能会改变，这样文章变了，评论就都没了，这并不是我想要的。我想修改这段逻辑让他变成使用 path 的最后一段作为 id，而我保证无论 url 怎么变，最后一段 path 不变。</p><p>安装<code>patch-package</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i patch-package --save-dev</span><br></pre></td></tr></table></figure><p>添加<code>postinstall</code>脚本，以便后面我换电脑或者我的 CI 机器人可以自动执行我的修改逻辑</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;postinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;patch-package&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>直接进入<code>node_modeles</code>中修改逻辑<br>原来的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initGitalk</span> () &#123;</span><br><span class="line">  <span class="keyword">var</span> gitalk = <span class="keyword">new</span> <span class="title class_">Gitalk</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;</span><br><span class="line">    <span class="attr">clientID</span>: <span class="string">&#x27;!&#123;theme.gitalk.client_id&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">clientSecret</span>: <span class="string">&#x27;!&#123;theme.gitalk.client_secret&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">repo</span>: <span class="string">&#x27;!&#123;theme.gitalk.repo&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">owner</span>: <span class="string">&#x27;!&#123;theme.gitalk.owner&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">admin</span>: [<span class="string">&#x27;!&#123;theme.gitalk.admin&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;!&#123;md5(page.path)&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">updateCountCallback</span>: commentCount</span><br><span class="line">  &#125;,!&#123;<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(theme.<span class="property">gitalk</span>.<span class="property">option</span>)&#125;))</span><br><span class="line"></span><br><span class="line">  gitalk.<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initGitalk</span> () &#123;</span><br><span class="line">  <span class="keyword">var</span> gitalk = <span class="keyword">new</span> <span class="title class_">Gitalk</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;</span><br><span class="line">    <span class="attr">clientID</span>: <span class="string">&#x27;!&#123;theme.gitalk.client_id&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">clientSecret</span>: <span class="string">&#x27;!&#123;theme.gitalk.client_secret&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">repo</span>: <span class="string">&#x27;!&#123;theme.gitalk.repo&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">owner</span>: <span class="string">&#x27;!&#123;theme.gitalk.owner&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">admin</span>: [<span class="string">&#x27;!&#123;theme.gitalk.admin&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;!&#123;md5(page.path.split(&quot;/&quot;).slice(-2)[0])&#125;&#x27;</span>,</span><br><span class="line">    <span class="attr">updateCountCallback</span>: commentCount</span><br><span class="line">  &#125;,!&#123;<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(theme.<span class="property">gitalk</span>.<span class="property">option</span>)&#125;))</span><br><span class="line"></span><br><span class="line">  gitalk.<span class="title function_">render</span>(<span class="string">&#x27;gitalk-container&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行<code>npx patch-package hexo-theme-butterfly</code><br>可以看到他生成了一个<code>hexo-theme-butterfly+4.3.1.patch</code>的文件，里面记录了上述修改。</p><p>这样就完成了修改。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OD逆向系列3-多种方式破解实战</title>
      <link href="/2022/he8bzs/"/>
      <url>/2022/he8bzs/</url>
      
        <content type="html"><![CDATA[<p>本文使用的例子可以关注公众号<strong>全栈编程笔记</strong>回复<strong>OD 逆向工具包</strong>进行下载<br>特别声明：例子和工具来源于网络，不保证安全性，在操作之前建议使用冰点还原或者你认为安全的工具保护系统。</p><h2 id="本文介绍"><a href="#本文介绍" class="headerlink" title="本文介绍"></a>本文介绍</h2><p>本文使用<strong>密码登录.exe</strong>这个例子来介绍多种方式破解。这里例子的大致工作原理是在一个输入框中输入一个密码，如果错误会提示登录失败<br><img src="/images/1657784663589-ccace046-f153-4455-a32f-a9def1584f01.png"><br>如果输入正确的密码就会弹出一个新的窗口<br><img src="/images/1657962284787-05aa30f8-2b8d-4e48-ab73-37c63de9ad25.png"></p><p>破解目标，让他弹出来登录成功的窗口</p><h2 id="破解方法"><a href="#破解方法" class="headerlink" title="破解方法"></a>破解方法</h2><h3 id="字符串破解法"><a href="#字符串破解法" class="headerlink" title="字符串破解法"></a>字符串破解法</h3><h4 id="1-找到文件头"><a href="#1-找到文件头" class="headerlink" title="1. 找到文件头"></a>1. 找到文件头</h4><p>使用 OD 打开例子，按下<code>Ctrl + G</code>进行搜索<code>00401000</code>（exe 程序的文件头）<br><img src="/images/1657784738962-125d1b34-c3a7-43b7-8714-9bdb36968586.png"></p><h4 id="2-智能搜索"><a href="#2-智能搜索" class="headerlink" title="2. 智能搜索"></a>2. 智能搜索</h4><p>可以搜索关键字，找到”登陆失败”这几个关键字<br>右击，找到中文搜索引擎中的只能搜索。<br><img src="/images/1657784833085-3648b74e-286c-4d7b-a7a4-3e339f22dd08.png"><br><code>Ctrl + F </code>搜索 “登陆失败” 找到位置</p><p>可以很容易分析发现，是由于这个跳转导致的弹出登录失败的窗口<img src="/images/1657785252233-ac6b24cf-f733-4078-a0c6-adad52c82c66.png"><br>那我们这里就可以简单的把这个跳转语句抹掉。点击这个语句，右击二进制，使用 nop 填充<br><img src="/images/1657786078368-1ae9bf7b-34bb-4661-8d3e-e560d93ddf98.png"><br>再次点击登录按钮可以看到登录成功的窗口弹出来了。<br><img src="/images/1657962284787-05aa30f8-2b8d-4e48-ab73-37c63de9ad25.png"></p><h3 id="弹窗断点法"><a href="#弹窗断点法" class="headerlink" title="弹窗断点法"></a>弹窗断点法</h3><p>因为报错信息是一个错误弹窗，我们可以下一个弹窗断点来找到报出错误的地方。</p><h4 id="1-设置消息框断点"><a href="#1-设置消息框断点" class="headerlink" title="1. 设置消息框断点"></a>1. 设置消息框断点</h4><p><img src="/images/1657966798455-720aece6-c661-4d77-8ff7-3e219fbb7301.png"></p><h4 id="2-运行程序，使其弹出消息框"><a href="#2-运行程序，使其弹出消息框" class="headerlink" title="2. 运行程序，使其弹出消息框"></a>2. 运行程序，使其弹出消息框</h4><h4 id="3-寻找调用过程"><a href="#3-寻找调用过程" class="headerlink" title="3. 寻找调用过程"></a>3. 寻找调用过程</h4><p>点击<img src="/images/1657966895797-12e802e5-aa8d-4ceb-9799-0d7a4a4b5267.png"><br>然后点击<img src="/images/1657966918168-24a994ac-d87c-470f-857c-038ffbaa558d.png"><br>点击 k 查看调用栈<br><img src="/images/1657967007981-80cc2b5d-2c3b-4650-8203-2095977d8bce.png"><br>右击第二个显示调用<br>也可以找到这个位置<br><img src="/images/1657967079160-2f6b5305-cc01-49c1-9d0e-321b7e7dbd00.png"></p><h3 id="Push-大法"><a href="#Push-大法" class="headerlink" title="Push 大法"></a>Push 大法</h3><p>push 大法就是让他跳过登录窗口直接到达目标窗口</p><h4 id="1-跳转到文件头"><a href="#1-跳转到文件头" class="headerlink" title="1. 跳转到文件头"></a>1. 跳转到文件头</h4><h4 id="2-找到窗口"><a href="#2-找到窗口" class="headerlink" title="2. 找到窗口"></a>2. 找到窗口</h4><p><code>Ctrl + F</code>搜索 <code>push 10001</code>。<code>push 10001</code>隔一条指令就是一个窗口，当然有些软件不止一个窗口，可以使用<code>Ctrl + L</code>搜索下一个，把这些窗口复制下来。<br><img src="/images/1657963362374-78a9abae-62bc-497f-8e3f-7eeed23d8de2.png"></p><h4 id="3-进行替换"><a href="#3-进行替换" class="headerlink" title="3. 进行替换"></a>3. 进行替换</h4><p>输入<code>Ctrl + B</code>搜索<code>ff25</code><br><img src="/images/1657963691472-d4da11de-7408-4ea7-a98e-e5d4a248cd82.png"><br>可以看到在搜索结果的上面他 push 进去了一个窗口，现在我们把他修改成我们刚才找到的窗口。<br>右键汇编 将<code>push 0x52010001</code>修改为 <code>push 0x5201000E</code>这个时候打开软件就直接跳出来登录成功了。<br>有多个窗口的情况下需要挨个尝试，直到找到想要的窗口。</p><h3 id="直接跳转"><a href="#直接跳转" class="headerlink" title="直接跳转"></a>直接跳转</h3><p>有时候已经找到了关键的代码的时候可以直接使用 jmp 跳转。<br>比如我们已经找到了这段逻辑，判断 xxx，如果成立则验证成功。那我们可以直接跳转到判断的逻辑下面去，让他直接执行判断之后的逻辑。<br>这种和 push 大法比较相似，不同的是 push 大法修改的是窗口地址，这里直接把整条 push 都修改了，这里就不赘述了。</p><h2 id="如何保存"><a href="#如何保存" class="headerlink" title="如何保存"></a>如何保存</h2><p>使用 OD 修改之后可以立刻生效，但是下次打开程序就会失效了,这个时候我们需要把修改保存下来。<br>右键 保存到可执行文件，所有修改<br><img src="/images/1657786821899-bcfe9d32-e537-412b-8935-18402324730f.png"><br>这个时候会出来这样一个框，右键保存到文件即可<br><img src="/images/1657786759855-f70917c1-8866-40a4-ad11-532d0d8b6401.png"></p>]]></content>
      
      
      <categories>
          
          <category> OD 逆向系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> OD </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OD逆向系列2-常用的汇编指令</title>
      <link href="/2022/nmpl9t/"/>
      <url>/2022/nmpl9t/</url>
      
        <content type="html"><![CDATA[<p>这些指令不需要死记，用的时候查表知道是干什么的就可以了。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>cmp a,b</td><td>比较 a,b 大小</td></tr><tr><td>mov a,b</td><td>b 的值赋给 a</td></tr><tr><td>ret</td><td>返回主程序</td></tr><tr><td>nop</td><td>空语句</td></tr><tr><td>call</td><td>调用子程序</td></tr><tr><td>je&#x2F;jz</td><td>相等则跳转 机器码是 74&#x2F;84</td></tr><tr><td>jez&#x2F;jnz</td><td>不相等则跳 机器码是 75&#x2F;85</td></tr><tr><td>jmp</td><td>无条件跳 机器码是 EB</td></tr><tr><td>jb&#x2F;jl</td><td>小于则跳</td></tr><tr><td>ja&#x2F;jg</td><td>大于则跳</td></tr><tr><td>jge</td><td>大于等于则跳</td></tr><tr><td>pop xxx</td><td>xxx 出栈</td></tr><tr><td>push xxx</td><td>xxx 压栈</td></tr></tbody></table><p>如果想了解更详细可以参考一下<a href="https://www.beimeng.org/2022/kq0iqk/">逆向汇编基础 </a></p>]]></content>
      
      
      <categories>
          
          <category> OD 逆向系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> OD </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OD逆向系列1-搭建环境</title>
      <link href="/2022/xbhk7s/"/>
      <url>/2022/xbhk7s/</url>
      
        <content type="html"><![CDATA[<h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p>本文所有的涉及到的软件可以关注公众号<strong>全栈编程笔记</strong>回复<strong>OD 逆向工具包</strong>进行下载</p><h2 id="冰点还原"><a href="#冰点还原" class="headerlink" title="冰点还原"></a>冰点还原</h2><p>在逆向的过程中有一些恶意程序会带有破坏性的行为损伤电脑文件，因此需要提前搞好保护措施来保护我们的电脑。<br>这里使用冰点还原来进行保护。冰点还原可以做到类似网吧的那种效果，每次开机之后都会把系统恢复到之前的状态。</p><h3 id="为什么不用虚拟机"><a href="#为什么不用虚拟机" class="headerlink" title="为什么不用虚拟机"></a>为什么不用虚拟机</h3><p>很多软件都会对虚拟机进行检测，不允许在虚拟机环境中运行</p><h2 id="常用逆向工具包"><a href="#常用逆向工具包" class="headerlink" title="常用逆向工具包"></a>常用逆向工具包</h2><p>这里准备一个逆向工具包，包括常用的工具 od、ce、exeinfope 等工具，具体可以看下面的截图<br><img src="/images/1657712824715-1f511723-b17b-4b9a-ba98-f250e59b660c.png"></p><h2 id="驱动-OD"><a href="#驱动-OD" class="headerlink" title="驱动 OD"></a>驱动 OD</h2><p>对于一些加了壳的软件，加壳工具可能会对调试工具进行检测，一般的 OD 搞定不了这些壳，需要特别的驱动 OD 进行逆向。</p><h1 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h1><p>本文所有的工具均来源于网络，<strong>不保证安全性</strong>，因此在打开之前建议使用<strong>冰点还原</strong>将磁盘冻结，使用完成之后恢复原来的系统。</p>]]></content>
      
      
      <categories>
          
          <category> OD 逆向系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> OD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canal同步mysql数据到es</title>
      <link href="/2022/lr0bf3/"/>
      <url>/2022/lr0bf3/</url>
      
        <content type="html"><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>docker</li><li>mysql 8.0.25</li><li>canal 1.1.5</li><li>canal-admin 1.1.5</li><li>canal-adapter 1.1.5</li><li>elasticsearch 7.3.0</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>修改 my.ini，开启 binlog</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="string">log-bin=mysql-bin</span></span><br><span class="line"><span class="string">binlog-format=ROW</span></span><br><span class="line"><span class="string">server-id=1</span></span><br></pre></td></tr></table></figure><p>使用 docker-compose 启动 mysql</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql8</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0.25</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mysqld</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./data:/var/lib/mysql&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;.my.cnf:/etc/mysql/conf.d/my.cnf&quot;</span></span><br></pre></td></tr></table></figure><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>使用 docker-compose 搭建一个单机版的 es，并且启动 kibana 控制台方便一会操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">node01:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:7.3.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node01</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node.name=node01</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">cluster.name=es-cluster-7</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms1024m -Xmx1024m&quot;</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-data01:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-network</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.elastic.co/kibana/kibana:7.3.0</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://node01:9200</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">es-network</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">node01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">es-data01:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">es-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>kibana.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.url: &quot;http://es:9200&quot;</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br></pre></td></tr></table></figure><h3 id="canal-admin"><a href="#canal-admin" class="headerlink" title="canal-admin"></a>canal-admin</h3><p>下载 canal-admin 的运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/alibaba/canal/master/docker/run_admin.sh</span><br></pre></td></tr></table></figure><p>执行 canal_manager.sql 初始化 canal-admin 的数据表<br>启动 canal-admin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sh run_admin.sh -e server.port=8089 \</span><br><span class="line">        -e canal.adminUser=admin \</span><br><span class="line">        -e canal.adminPasswd=123456 \</span><br><span class="line">        -e spring.datasource.address=docker.for.mac.host.internal:3306 \</span><br><span class="line">        -e spring.datasource.database=canal_manager \</span><br><span class="line">        -e spring.datasource.username=root \</span><br><span class="line">        -e spring.datasource.password=root</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8089/</code> 密码是 admin&#x2F;123456</p><p><img src="/images/1657502465374-00c08f5b-9878-4197-96dd-16a8786efad2.png"></p><h3 id="canal"><a href="#canal" class="headerlink" title="canal"></a>canal</h3><p>创建一个专用的 canal 账号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> canal IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;canal&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, REPLICATION SLAVE, REPLICATION CLIENT <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;canal&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>下载 canal 启动脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/alibaba/canal/master/docker/run.sh</span><br></pre></td></tr></table></figure><p>运行 canal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sh run.sh -e canal.admin.manager=docker.for.mac.host.internal:8089 \</span><br><span class="line">         -e canal.admin.port=11110 \</span><br><span class="line">         -e canal.port=11111 \</span><br><span class="line">         -e canal.metrics.pull.port=11122 \</span><br><span class="line">         -e canal.admin.user=admin \</span><br><span class="line">         -e canal.admin.passwd=6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9</span><br></pre></td></tr></table></figure><p>canal 启动成功之后登陆 canal-admin 创建一个 example 的 instance 一会会用到<br>一个 instance 对应一个 mysql 实例</p><p><img src="/images/1657502466449-e864ada8-2f8d-468b-9d73-49592a0fb5e0.png"></p><h3 id="canal-adapter"><a href="#canal-adapter" class="headerlink" title="canal-adapter"></a>canal-adapter</h3><p>canal-adapter 官方没有提供镜像，这里我们自己做一个。<br>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jre-alpine</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> canal.adapter-1.1.5.tar.gz /opt/canal/adapter/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/canal/adapter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sh bin/startup.sh &amp;&amp; tail -F logs/adapter/adapter.log&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>这里不从官方直接下载 1.1.5 的包。而是自己打一个，因为官方的 1.1.5 的包有问题，直到写这篇文章的时候还没解决。参照<a href="https://github.com/alibaba/canal/issues/3144">https://github.com/alibaba/canal/issues/3144</a>自己打一个<br>docker-compose.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  adapter:</span><br><span class="line">    build: .</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;./conf:/opt/canal/adapter/conf&quot;</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line">spring:</span><br><span class="line">  jackson:</span><br><span class="line">    date-format: yyyy-MM-dd HH:mm:ss</span><br><span class="line">    time-zone: GMT+8</span><br><span class="line">    default-property-inclusion: non_null</span><br><span class="line"></span><br><span class="line">canal.conf:</span><br><span class="line">  mode: tcp #tcp kafka rocketMQ rabbitMQ</span><br><span class="line">  flatMessage: true</span><br><span class="line">  zookeeperHosts:</span><br><span class="line">  syncBatchSize: 1000</span><br><span class="line">  retries: 0</span><br><span class="line">  timeout:</span><br><span class="line">  accessKey:</span><br><span class="line">  secretKey:</span><br><span class="line">  consumerProperties:</span><br><span class="line">    # canal tcp consumer</span><br><span class="line">    canal.tcp.server.host: docker.for.mac.host.internal:11111</span><br><span class="line">    canal.tcp.zookeeper.hosts:</span><br><span class="line">    canal.tcp.batch.size: 500</span><br><span class="line">    canal.tcp.username:</span><br><span class="line">    canal.tcp.password:</span><br><span class="line"></span><br><span class="line">  srcDataSources:</span><br><span class="line">    defaultDS:</span><br><span class="line">      url: jdbc:mysql://docker.for.mac.host.internal:3306/test?useUnicode=true</span><br><span class="line">      username: canal</span><br><span class="line">      password: canal</span><br><span class="line">  canalAdapters:</span><br><span class="line">  - instance: example # canal instance Name or mq topic name</span><br><span class="line">    groups:</span><br><span class="line">    - groupId: g1</span><br><span class="line">      outerAdapters:</span><br><span class="line">        - name: logger</span><br><span class="line">        - name: es7</span><br><span class="line">          hosts: docker.for.mac.host.internal:9200 # 127.0.0.1:9200 for rest mode</span><br><span class="line">          properties:</span><br><span class="line">            mode: rest</span><br><span class="line">            cluster.name: elasticsearch</span><br></pre></td></tr></table></figure><p>启动 canal-adapter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><p>创建需要同步的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `product` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sub_title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pic` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure><p>使用 kibana 创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT product</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;sub_title&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;pic&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;double&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>es7/product.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dataSourceKey: defaultDS</span><br><span class="line">destination: example</span><br><span class="line">groupId: g1</span><br><span class="line">esMapping:</span><br><span class="line">  _index: product</span><br><span class="line">  _id: _id</span><br><span class="line">  sql: &quot;SELECT</span><br><span class="line">         p.id AS _id,</span><br><span class="line">         p.title,</span><br><span class="line">         p.sub_title,</span><br><span class="line">         p.price,</span><br><span class="line">         p.pic</span><br><span class="line">        FROM</span><br><span class="line">         product p&quot;</span><br><span class="line">  etlCondition: &quot;1=1&quot;</span><br><span class="line">  commitBatch: 3000</span><br></pre></td></tr></table></figure><p>重启 canal-adapter<br>使用 mysql 插入一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO product ( id, title, sub_title, price, pic ) VALUES ( 1, &#x27;iphone12&#x27;, &#x27;iphone&#x27;, 6999.00, NULL );</span><br></pre></td></tr></table></figure><p>查询 es</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET product/_search</span><br></pre></td></tr></table></figure><p>查询结果，可以看到已经同步成功了<br><img src="/images/1657502470764-b2bf0c17-7c91-4323-8a9a-aee6bd957259.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> canal </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形表结构设计</title>
      <link href="/2022/gs541x/"/>
      <url>/2022/gs541x/</url>
      
        <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>根据一个部门查询这个部门的全部子级部门</p><h2 id="方案-1-正常设计"><a href="#方案-1-正常设计" class="headerlink" title="方案 1: 正常设计"></a>方案 1: 正常设计</h2><table><thead><tr><th>字段</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>部门 id</td></tr><tr><td>dept_name</td><td>部门名称</td></tr><tr><td>parent_id</td><td>上级部门 id</td></tr></tbody></table><p>这种设计方案是符合第三范式的最简单方案。可以完美描述树状结构，并且没有任何冗余数据。但缺点也是显而易见的。如果跨层级查询就要递归查询</p><h2 id="方案-2-冗余路径"><a href="#方案-2-冗余路径" class="headerlink" title="方案 2: 冗余路径"></a>方案 2: 冗余路径</h2><table><thead><tr><th>字段</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>部门 id</td></tr><tr><td>dept_name</td><td>部门名称</td></tr><tr><td>parent_id</td><td>上级部门 id</td></tr><tr><td>path</td><td>从最上级到该节点的路径 以 &#x2F; 分割</td></tr></tbody></table><p>数据示例</p><table><thead><tr><th>id</th><th>dept_name</th><th>parent_id</th><th>path</th></tr></thead><tbody><tr><td>1</td><td>xx 科技有限公司</td><td></td><td>&#x2F;1</td></tr><tr><td>2</td><td>研发部</td><td>1</td><td>&#x2F;1&#x2F;2</td></tr><tr><td>3</td><td>后端</td><td>2</td><td>&#x2F;1&#x2F;2&#x2F;3</td></tr><tr><td>4</td><td>前端</td><td>2</td><td>&#x2F;1&#x2F;2&#x2F;4</td></tr><tr><td>5</td><td>产品设计部</td><td>1</td><td>&#x2F;1&#x2F;5</td></tr><tr><td>6</td><td>PD</td><td>5</td><td>&#x2F;1&#x2F;5&#x2F;6</td></tr><tr><td>7</td><td>UED</td><td>5</td><td>&#x2F;1&#x2F;5&#x2F;7</td></tr></tbody></table><p>在这样表设计的情况下，查询全部子集就变成了对 path 的前缀匹配。比如我要查询所有研发部的子部门就可以这样写 sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept_info <span class="keyword">where</span> path <span class="keyword">like</span> <span class="string">&#x27;/1/2%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样的设计可以比较简单的完成查询需求，但是对于插入和更新就需要重新计算<code>path</code>，并且更新全部下级的<code>path</code>并且<code>path</code>字段不可以无限扩展，因为受到 mysql 字段大小的约束，当然可以在一开始把这个字段开的足够大。</p><p>移动部门<br>如果需要把产品设计部移动到研发部下面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> dept_info <span class="keyword">set</span> parent_id <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> dept_info <span class="keyword">set</span> path <span class="operator">=</span> replace(path,<span class="string">&#x27;/1/5&#x27;</span>,<span class="string">&#x27;1/2/5&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="方案-3-闭包表"><a href="#方案-3-闭包表" class="headerlink" title="方案 3: 闭包表"></a><del>方案 3: 闭包表</del></h2><p>方案 2 对于绝大部分的场景下已经足够用了。但是如果真的需要解决无限嵌套的问题该怎么办呢。现在之所以不能无限嵌套的原因在于<code>path</code>的字段长度有限。可以把<code>path</code>这个字段拿出来单独拆分成一张表。</p><p>把 path 字段拍平。记录全部根节点到叶子结点的关系。</p><table><thead><tr><th>字段</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td></td></tr><tr><td>ancestor</td><td>祖先 id</td></tr><tr><td>descendant</td><td>后代 id</td></tr><tr><td>depth</td><td>层级深度</td></tr></tbody></table><p>但是这样层级太多的时候会带来大量的关联操作。而且在新增和编辑节点的时候操作相对复杂。其实得不偿失。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>接到了域名到期的诈骗电话</title>
      <link href="/2022/nl8p8z/"/>
      <url>/2022/nl8p8z/</url>
      
        <content type="html"><![CDATA[<h2 id="域名到期？"><a href="#域名到期？" class="headerlink" title="域名到期？"></a>域名到期？</h2><p>今天家里人接到了一个来自济南的号码<code>053186922572</code>的电话，说网站域名到期。6 月 30 号刚查过还有很长一段时间才过期，网站当时是我搞的，所以就问我怎么回事。我根据她的描述第一反应是骗子。就让他把电话给我，我来看看。</p><p>当拿到电话之后查了一下是山东济南的电话的时候基本就已经肯定是诈骗了。上网简单搜了一下这个诈骗套路，一般都是说域名到期，然后委托他们给你注册一个新的域名（注意是新的，不是给原来的续费），手续分很贵，不懂的人很容易就上当了。</p><h2 id="xx-互联网公司？"><a href="#xx-互联网公司？" class="headerlink" title="xx 互联网公司？"></a>xx 互联网公司？</h2><p>本着戏耍的态度，我打了那个电话回去。接电话的是一个男生，他问我是干什么的，我说你刚才给我打电话说域名到期了，我想咨询一下，然后他说，电话不是他打的，是同事打的，同事出去了。他不知道同事的业务，我问他们是啥公司的，他说是 xx 互联网公司。我让他同事回来给我打回来。这里我就很确定了是诈骗了。</p><p>这个时候我在网上搜了一下 xx 互联网公司，根据企查查中的记录，他们公司确实有域名服务，进了他们公司官网，看到了一醒目的 18 年左右的公告链接，点开之后显示说近期有人冒充他们公司的名号进行诈骗，说什么已报案了之类的巴拉巴拉的。</p><p>又继续用这个名字搜了一下，也是 18 年的新闻说有几个人被抓了，几天之内非法获利 xx 万巴拉巴拉的，刚好是用这个域名续费为理由的诈骗。好家伙理由都不换一个的吗。还是说关于建站这方面就是好骗。这里有两个可能性，一个真的是有人冒充他们公司诈骗，另一个其实就是自导自演。这里不好多说，懂得都懂。</p><p>这个时候那个电话打过来了，是个女生。问我是哪家公司的，我问她是哪个公司的她不说。又简单问了些跟域名还有备案相关的也说不出来。最后我说如果你不知道你是在诈骗建议你立刻离职吧，我已经报警了，她就把电话挂了。</p><h2 id="信息泄漏"><a href="#信息泄漏" class="headerlink" title="信息泄漏"></a>信息泄漏</h2><p>还是信息泄漏的问题，虽然说网站域名，备案主体这些信息不难查到，但是由我家里人接到哪个电话就很奇怪了，哪个域名我家里人也只是知道而已，主体什么的都不是她，如果是官方渠道一定是不会找到她的。我认为并不是巧合，一定是信息泄漏知道我家里人和网站有一点点联系刚好就联系了她进行诈骗。</p><p>现在的信息泄漏真实太严重了。最近又有上海的数据信息泄漏被在暗网上买的消息传出来。如果消息是真的诈骗一定会定向和猖獗。信息时代一定要保护好自己的隐私。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反诈骗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 搜不到wifi解决</title>
      <link href="/2022/cgz6h5/"/>
      <url>/2022/cgz6h5/</url>
      
        <content type="html"><![CDATA[<p>我是用 mac 的，最近在折腾一些跟<code>.net framwork</code>相关的东西，一直远程也不太方便就用<code>Boot Camp</code>装了个了个 Windows，刚开始用多个好好的，直到因为一些问题我手贱点了重置网络。然后系统就搜不到 wifi 了。</p><h2 id="驱动问题？"><a href="#驱动问题？" class="headerlink" title="驱动问题？"></a>驱动问题？</h2><p>我一开始认为是驱动问题，我以为是因为硬件驱动导致的，苹果的硬件不支持微软的系统不是很正常，第一次驱动时<code>Boot Camp</code>装的，在 Windows 上面点了重置，鬼知道把驱动重置成了什么样子。所以我的想法就是搞一个<code>Boot Camp</code>。切换到 Mac，打开<code>Boot Camp</code>选择下载 windows 支持，将下载好的文件搞到 windows 里面安装。<br>但是并没有什么用，依然搜不到 wifi。<br>网上搜了一下，几乎都是认为是驱动的问题，说要安装驱动精灵什么的，试了一下果然没用，官方的驱动软件都搞不定的杂牌子搞不定很正常。</p><h2 id="Wifi-Autoconfig"><a href="#Wifi-Autoconfig" class="headerlink" title="Wifi Autoconfig"></a>Wifi Autoconfig</h2><p>继续查了一些资料，发现可能是<code>Wifi Autoconfig</code>服务没启动。按下 Win + R 快捷键，输入 service 回车。然后找到<code>Wifi Autoconfig</code>这个服务，果然没启动。把他启动了 wifi 功能恢复。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Action 不同Job共享数据</title>
      <link href="/2022/zelers/"/>
      <url>/2022/zelers/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个.net framwork 项目需要 windows 环境进行构建，构建完之后依赖一些其他的 action 进行一些后续的操作，但这些 action 其中一些不支持 windows 环境。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用<code>actions/upload-artifact@v2</code>上传需要共享的数据。使用<code>actions/download-artifact@v2</code>下载需要共享的数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">.NET</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build_job:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">windows-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">MSBuild</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">microsoft/setup-msbuild@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">NuGet</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">NuGet/setup-nuget@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restore</span> <span class="string">Packages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">nuget</span> <span class="string">restore</span> <span class="string">HearthstoneHelper.sln</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Solution</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          msbuild.exe HearthstoneHelper.sln /nr:false /p:platform=&quot;Any CPU&quot; /p:configuration=&quot;Release&quot;</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cp Mercenary/bin/Release/*.dll BepInEx/BepInEx/plugins</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">BepInEx</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">BepInEx/</span></span><br><span class="line">  <span class="attr">upload_job:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">build_job</span> <span class="comment">#job 依赖</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">BepInEx</span></span><br><span class="line">      <span class="comment"># Github空间有限 用完以后删掉</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">geekyeggo/delete-artifact@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">BepInEx</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Github Action </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个字符串的最长公共子序列问题-从暴力递归到动态规划优化</title>
      <link href="/2022/wypwww/"/>
      <url>/2022/wypwww/</url>
      
        <content type="html"><![CDATA[<p>动态规划问题的最终解是找到转移方程，但是转移方程很多时候并不是那么好找的。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定两个字符串寻找最长公共子序列。例如”ab1c2de3f”和”x1y2z3”的最长子序列为”123”</p><h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>暴力递归的解决思路是很容易想到的。<br>递归函数返回两个字符串 str1，str2 到 index1，index2 位置的最长公共子序列的长度。<br>递归终止的条件是两个串中任意一个串是空串，那么最长公共子序列的长度为 0。<br>到任意一个 index1，index2 位置有以下几种可能性</p><ul><li>最长公共子序列的最后一个值和 str1[index1] 、str2[index2]都相同。</li><li>最长公共子序列的最后一个值和 str1[index1] 、str2[index2]都不相同。</li><li>最长公共子序列的最后一个值和 str1[index1] 、str2[index2]其中一个相同。</li></ul><p>这样就把问题拆分成了子问题，使用递归求解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> process(text1.toCharArray(),text1.length() - <span class="number">1</span>,text2.toCharArray(),text2.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str1, <span class="type">int</span> index1, <span class="type">char</span>[] str2, <span class="type">int</span> index2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index2 &lt; <span class="number">0</span> || index1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(str1[index1] == str2[index2])&#123;</span><br><span class="line">            <span class="keyword">return</span> process(str1,index1 -<span class="number">1</span> ,str2, index2 -<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process(str1,index1,str2,index2 - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> process(str1,index1 - <span class="number">1</span>,str2,index2);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> process(str1,index1 - <span class="number">1</span>,str2,index2 - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> Math.max(Math.max(p1,p2),p3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是递归里面会进行很多次的重复计算，通常而言对于动态规划问题，暴力递归一般会超时。</p><h2 id="缓存优化记忆化搜索"><a href="#缓存优化记忆化搜索" class="headerlink" title="缓存优化记忆化搜索"></a>缓存优化记忆化搜索</h2><p>对于上述递归过程，其实会有很多重复的求解过程。<br>把重复的解放到一个缓存里面，每次直接从缓存中取值，这样就可以减少很多的重复过程。<br>新建 db 数组(当然 map 也可以)，作为缓存数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> db[][];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line"></span><br><span class="line">        db = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length()][text2.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; text2.length();j++)&#123;</span><br><span class="line">                db[i][j] = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> process(text1.toCharArray(),text1.length() - <span class="number">1</span>,text2.toCharArray(),text2.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">process</span><span class="params">(<span class="type">char</span>[] str1, <span class="type">int</span> index1, <span class="type">char</span>[] str2, <span class="type">int</span> index2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index2 &lt; <span class="number">0</span> || index1 &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(db[index1][index2] != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> db[index1][index2];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(str1[index1] == str2[index2])&#123;</span><br><span class="line">            db[index1][index2] = process(str1,index1 -<span class="number">1</span> ,str2, index2 -<span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> db[index1][index2];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> process(str1,index1,str2,index2 - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> process(str1,index1 - <span class="number">1</span>,str2,index2);</span><br><span class="line">            <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> process(str1,index1 - <span class="number">1</span>,str2,index2 - <span class="number">1</span>);</span><br><span class="line">            db[index1][index2] = Math.max(Math.max(p1,p2),p3);</span><br><span class="line">            <span class="keyword">return</span> db[index1][index2];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>上述的记忆化搜索已经可以 AC 了。看着上述的记忆化搜索的过程其实也比较容易推导出来动画规划的的转移方程了。其实从 0 开始直接构建上述的缓存 db 数组的过程就是动态规划的转移方程。把缓存想象成二位表，而转移方程就是构建二位表的过程。<br>PS：这里为了简化判断流程给二位表 db 多套了一层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] str1 = text1.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = text2.toCharArray();</span><br><span class="line">        <span class="type">int</span>[][] db = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length() + <span class="number">1</span>][text2.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= text1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= text2.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str1[i-<span class="number">1</span>] == str2[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                    db[i][j] = db[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">p1</span> <span class="operator">=</span> db[i][j-<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">p2</span> <span class="operator">=</span> db[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">p3</span> <span class="operator">=</span> db[i-<span class="number">1</span>][j];</span><br><span class="line">                    db[i][j] = Math.max(Math.max(p1,p2),p3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> db[text1.length()][text2.length()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 暴力递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的问题模版</title>
      <link href="/2022/ritgwn/"/>
      <url>/2022/ritgwn/</url>
      
        <content type="html"><![CDATA[<p>有关图的问题算法一般不是很复杂，难点一般在于数据结构，一张图可以用很多种的数据结构表达出来，相对应的同一种算法在不同的数据结构下面就有不同的表现。因此对于图问题有一个自己顺手的数据结构是很有必要的。当遇到不是自己顺手的数据结构可以手写转换器转换成自己熟悉的数据结构。<br>以下是个人顺手的数据结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Integer value;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 入度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> in;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> out;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Node&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Integer value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.in = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.out = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node from;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node to;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> weight, Node&lt;T&gt; from, Node&lt;T&gt; to)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        <span class="built_in">this</span>.from = from;</span><br><span class="line">        <span class="built_in">this</span>.to = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;Integer,Node&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">()</span> &#123;</span><br><span class="line">        nodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于模版，实现图的算法</p><h2 id="广度优先遍历-bfs"><a href="#广度优先遍历-bfs" class="headerlink" title="广度优先遍历 bfs"></a>广度优先遍历 bfs</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    queue.add(node);</span><br><span class="line">    set.add(node);</span><br><span class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        System.out.println(cur.value);</span><br><span class="line">        <span class="keyword">for</span>(Node next: cur.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(next))&#123;</span><br><span class="line">                queue.add(next);</span><br><span class="line">                set.add(next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深度优先遍历-dfs"><a href="#深度优先遍历-dfs" class="headerlink" title="深度优先遍历 dfs"></a>深度优先遍历 dfs</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node node)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    stack.add(node);</span><br><span class="line">    set.add(node);</span><br><span class="line">    System.out.println(node.value);</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty())&#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">for</span>(Node next: cur.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(next))&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                stack.push(next);</span><br><span class="line">                set.add(next);</span><br><span class="line">                System.out.println(next.value);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
